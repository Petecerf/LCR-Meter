
State_Machine_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080040c0  080040c0  000140c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004108  08004108  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000040  08004150  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08004150  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb33  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bdb  00000000  00000000  0002bba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002d780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002e140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fb38  00000000  00000000  0002ea28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000866b  00000000  00000000  0004e560  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd703  00000000  00000000  00056bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001142ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  0011434c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000040 	.word	0x20000040
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080040a4 	.word	0x080040a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000044 	.word	0x20000044
 8000204:	080040a4 	.word	0x080040a4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 bc2e 	b.w	8001228 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 fac2 	bl	8000f5c <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__divdc3>:
 80009e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009e8:	ec55 4b12 	vmov	r4, r5, d2
 80009ec:	ec5b ab13 	vmov	sl, fp, d3
 80009f0:	b08b      	sub	sp, #44	; 0x2c
 80009f2:	ee12 0a10 	vmov	r0, s4
 80009f6:	ee13 2a10 	vmov	r2, s6
 80009fa:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 80009fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8000a02:	ed8d 0b02 	vstr	d0, [sp, #8]
 8000a06:	ed8d 1b00 	vstr	d1, [sp]
 8000a0a:	f000 fc6f 	bl	80012ec <__aeabi_dcmplt>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	d042      	beq.n	8000a98 <__divdc3+0xb4>
 8000a12:	4652      	mov	r2, sl
 8000a14:	465b      	mov	r3, fp
 8000a16:	4620      	mov	r0, r4
 8000a18:	4629      	mov	r1, r5
 8000a1a:	f7ff fee3 	bl	80007e4 <__aeabi_ddiv>
 8000a1e:	4606      	mov	r6, r0
 8000a20:	460f      	mov	r7, r1
 8000a22:	4602      	mov	r2, r0
 8000a24:	460b      	mov	r3, r1
 8000a26:	4620      	mov	r0, r4
 8000a28:	4629      	mov	r1, r5
 8000a2a:	f7ff fdb1 	bl	8000590 <__aeabi_dmul>
 8000a2e:	4652      	mov	r2, sl
 8000a30:	465b      	mov	r3, fp
 8000a32:	f7ff fbf7 	bl	8000224 <__adddf3>
 8000a36:	4632      	mov	r2, r6
 8000a38:	4680      	mov	r8, r0
 8000a3a:	4689      	mov	r9, r1
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000a42:	f7ff fda5 	bl	8000590 <__aeabi_dmul>
 8000a46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000a4a:	f7ff fbeb 	bl	8000224 <__adddf3>
 8000a4e:	4642      	mov	r2, r8
 8000a50:	464b      	mov	r3, r9
 8000a52:	f7ff fec7 	bl	80007e4 <__aeabi_ddiv>
 8000a56:	4632      	mov	r2, r6
 8000a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000a62:	f7ff fd95 	bl	8000590 <__aeabi_dmul>
 8000a66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a6a:	f7ff fbd9 	bl	8000220 <__aeabi_dsub>
 8000a6e:	4642      	mov	r2, r8
 8000a70:	464b      	mov	r3, r9
 8000a72:	f7ff feb7 	bl	80007e4 <__aeabi_ddiv>
 8000a76:	4680      	mov	r8, r0
 8000a78:	4689      	mov	r9, r1
 8000a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	f000 fc29 	bl	80012d8 <__aeabi_dcmpeq>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	d035      	beq.n	8000af6 <__divdc3+0x112>
 8000a8a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8000a8e:	ec49 8b11 	vmov	d1, r8, r9
 8000a92:	b00b      	add	sp, #44	; 0x2c
 8000a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a98:	4622      	mov	r2, r4
 8000a9a:	462b      	mov	r3, r5
 8000a9c:	4650      	mov	r0, sl
 8000a9e:	4659      	mov	r1, fp
 8000aa0:	f7ff fea0 	bl	80007e4 <__aeabi_ddiv>
 8000aa4:	4606      	mov	r6, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	460b      	mov	r3, r1
 8000aac:	4650      	mov	r0, sl
 8000aae:	4659      	mov	r1, fp
 8000ab0:	f7ff fd6e 	bl	8000590 <__aeabi_dmul>
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	f7ff fbb4 	bl	8000224 <__adddf3>
 8000abc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000ac0:	4680      	mov	r8, r0
 8000ac2:	4689      	mov	r9, r1
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	4639      	mov	r1, r7
 8000ac8:	f7ff fd62 	bl	8000590 <__aeabi_dmul>
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	f7ff fba8 	bl	8000224 <__adddf3>
 8000ad4:	4642      	mov	r2, r8
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	f7ff fe84 	bl	80007e4 <__aeabi_ddiv>
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	4639      	mov	r1, r7
 8000ae8:	f7ff fd52 	bl	8000590 <__aeabi_dmul>
 8000aec:	4602      	mov	r2, r0
 8000aee:	460b      	mov	r3, r1
 8000af0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000af4:	e7b9      	b.n	8000a6a <__divdc3+0x86>
 8000af6:	4642      	mov	r2, r8
 8000af8:	464b      	mov	r3, r9
 8000afa:	4640      	mov	r0, r8
 8000afc:	4649      	mov	r1, r9
 8000afe:	f000 fbeb 	bl	80012d8 <__aeabi_dcmpeq>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d1c1      	bne.n	8000a8a <__divdc3+0xa6>
 8000b06:	2200      	movs	r2, #0
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	f000 fbe3 	bl	80012d8 <__aeabi_dcmpeq>
 8000b12:	b340      	cbz	r0, 8000b66 <__divdc3+0x182>
 8000b14:	2200      	movs	r2, #0
 8000b16:	2300      	movs	r3, #0
 8000b18:	4650      	mov	r0, sl
 8000b1a:	4659      	mov	r1, fp
 8000b1c:	f000 fbdc 	bl	80012d8 <__aeabi_dcmpeq>
 8000b20:	b308      	cbz	r0, 8000b66 <__divdc3+0x182>
 8000b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000b26:	4602      	mov	r2, r0
 8000b28:	460b      	mov	r3, r1
 8000b2a:	f000 fbd5 	bl	80012d8 <__aeabi_dcmpeq>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	f000 81f8 	beq.w	8000f24 <__divdc3+0x540>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	4f9a      	ldr	r7, [pc, #616]	; (8000da0 <__divdc3+0x3bc>)
 8000b38:	bfb8      	it	lt
 8000b3a:	4f9a      	ldrlt	r7, [pc, #616]	; (8000da4 <__divdc3+0x3c0>)
 8000b3c:	f04f 0600 	mov.w	r6, #0
 8000b40:	bfb8      	it	lt
 8000b42:	2600      	movlt	r6, #0
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	4630      	mov	r0, r6
 8000b4a:	4639      	mov	r1, r7
 8000b4c:	f7ff fd20 	bl	8000590 <__aeabi_dmul>
 8000b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000b54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000b58:	4630      	mov	r0, r6
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	f7ff fd18 	bl	8000590 <__aeabi_dmul>
 8000b60:	4680      	mov	r8, r0
 8000b62:	4689      	mov	r9, r1
 8000b64:	e791      	b.n	8000a8a <__divdc3+0xa6>
 8000b66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000b6a:	4632      	mov	r2, r6
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4630      	mov	r0, r6
 8000b70:	4639      	mov	r1, r7
 8000b72:	f7ff fb55 	bl	8000220 <__aeabi_dsub>
 8000b76:	4632      	mov	r2, r6
 8000b78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4630      	mov	r0, r6
 8000b80:	4639      	mov	r1, r7
 8000b82:	f04f 0601 	mov.w	r6, #1
 8000b86:	f000 fba7 	bl	80012d8 <__aeabi_dcmpeq>
 8000b8a:	b908      	cbnz	r0, 8000b90 <__divdc3+0x1ac>
 8000b8c:	f04f 0600 	mov.w	r6, #0
 8000b90:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000b94:	d00e      	beq.n	8000bb4 <__divdc3+0x1d0>
 8000b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	f04f 0601 	mov.w	r6, #1
 8000ba2:	f000 fb99 	bl	80012d8 <__aeabi_dcmpeq>
 8000ba6:	b108      	cbz	r0, 8000bac <__divdc3+0x1c8>
 8000ba8:	f04f 0600 	mov.w	r6, #0
 8000bac:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000bb0:	f040 80fa 	bne.w	8000da8 <__divdc3+0x3c4>
 8000bb4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8000bb8:	4632      	mov	r2, r6
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fb2e 	bl	8000220 <__aeabi_dsub>
 8000bc4:	4632      	mov	r2, r6
 8000bc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4630      	mov	r0, r6
 8000bce:	4639      	mov	r1, r7
 8000bd0:	f04f 0601 	mov.w	r6, #1
 8000bd4:	f000 fb80 	bl	80012d8 <__aeabi_dcmpeq>
 8000bd8:	b908      	cbnz	r0, 8000bde <__divdc3+0x1fa>
 8000bda:	f04f 0600 	mov.w	r6, #0
 8000bde:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000be2:	d00e      	beq.n	8000c02 <__divdc3+0x21e>
 8000be4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 0601 	mov.w	r6, #1
 8000bf0:	f000 fb72 	bl	80012d8 <__aeabi_dcmpeq>
 8000bf4:	b108      	cbz	r0, 8000bfa <__divdc3+0x216>
 8000bf6:	f04f 0600 	mov.w	r6, #0
 8000bfa:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000bfe:	f040 815b 	bne.w	8000eb8 <__divdc3+0x4d4>
 8000c02:	4622      	mov	r2, r4
 8000c04:	462b      	mov	r3, r5
 8000c06:	4620      	mov	r0, r4
 8000c08:	4629      	mov	r1, r5
 8000c0a:	f7ff fb09 	bl	8000220 <__aeabi_dsub>
 8000c0e:	4622      	mov	r2, r4
 8000c10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000c14:	462b      	mov	r3, r5
 8000c16:	4620      	mov	r0, r4
 8000c18:	4629      	mov	r1, r5
 8000c1a:	f04f 0601 	mov.w	r6, #1
 8000c1e:	f000 fb5b 	bl	80012d8 <__aeabi_dcmpeq>
 8000c22:	b908      	cbnz	r0, 8000c28 <__divdc3+0x244>
 8000c24:	f04f 0600 	mov.w	r6, #0
 8000c28:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000c2c:	d00e      	beq.n	8000c4c <__divdc3+0x268>
 8000c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000c32:	4610      	mov	r0, r2
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 0601 	mov.w	r6, #1
 8000c3a:	f000 fb4d 	bl	80012d8 <__aeabi_dcmpeq>
 8000c3e:	b108      	cbz	r0, 8000c44 <__divdc3+0x260>
 8000c40:	f04f 0600 	mov.w	r6, #0
 8000c44:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000c48:	f040 8153 	bne.w	8000ef2 <__divdc3+0x50e>
 8000c4c:	4652      	mov	r2, sl
 8000c4e:	465b      	mov	r3, fp
 8000c50:	4650      	mov	r0, sl
 8000c52:	4659      	mov	r1, fp
 8000c54:	f7ff fae4 	bl	8000220 <__aeabi_dsub>
 8000c58:	4652      	mov	r2, sl
 8000c5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8000c5e:	465b      	mov	r3, fp
 8000c60:	4650      	mov	r0, sl
 8000c62:	4659      	mov	r1, fp
 8000c64:	f04f 0601 	mov.w	r6, #1
 8000c68:	f000 fb36 	bl	80012d8 <__aeabi_dcmpeq>
 8000c6c:	b908      	cbnz	r0, 8000c72 <__divdc3+0x28e>
 8000c6e:	f04f 0600 	mov.w	r6, #0
 8000c72:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000c76:	f43f af08 	beq.w	8000a8a <__divdc3+0xa6>
 8000c7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8000c7e:	4610      	mov	r0, r2
 8000c80:	4619      	mov	r1, r3
 8000c82:	f04f 0601 	mov.w	r6, #1
 8000c86:	f000 fb27 	bl	80012d8 <__aeabi_dcmpeq>
 8000c8a:	b108      	cbz	r0, 8000c90 <__divdc3+0x2ac>
 8000c8c:	f04f 0600 	mov.w	r6, #0
 8000c90:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000c94:	f43f aef9 	beq.w	8000a8a <__divdc3+0xa6>
 8000c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f000 fb1a 	bl	80012d8 <__aeabi_dcmpeq>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	f43f aef0 	beq.w	8000a8a <__divdc3+0xa6>
 8000caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000cae:	4602      	mov	r2, r0
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	f7ff fab5 	bl	8000220 <__aeabi_dsub>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	f000 fb0d 	bl	80012d8 <__aeabi_dcmpeq>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	f43f aee3 	beq.w	8000a8a <__divdc3+0xa6>
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8000ccc:	4690      	mov	r8, r2
 8000cce:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	465b      	mov	r3, fp
 8000cd6:	4650      	mov	r0, sl
 8000cd8:	4659      	mov	r1, fp
 8000cda:	f7ff faa1 	bl	8000220 <__aeabi_dsub>
 8000cde:	4652      	mov	r2, sl
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	465b      	mov	r3, fp
 8000ce6:	4650      	mov	r0, sl
 8000ce8:	4659      	mov	r1, fp
 8000cea:	ea45 0904 	orr.w	r9, r5, r4
 8000cee:	f04f 0401 	mov.w	r4, #1
 8000cf2:	f000 faf1 	bl	80012d8 <__aeabi_dcmpeq>
 8000cf6:	b908      	cbnz	r0, 8000cfc <__divdc3+0x318>
 8000cf8:	f04f 0400 	mov.w	r4, #0
 8000cfc:	f014 0fff 	tst.w	r4, #255	; 0xff
 8000d00:	d00e      	beq.n	8000d20 <__divdc3+0x33c>
 8000d02:	4632      	mov	r2, r6
 8000d04:	463b      	mov	r3, r7
 8000d06:	4630      	mov	r0, r6
 8000d08:	4639      	mov	r1, r7
 8000d0a:	f04f 0401 	mov.w	r4, #1
 8000d0e:	f000 fae3 	bl	80012d8 <__aeabi_dcmpeq>
 8000d12:	b108      	cbz	r0, 8000d18 <__divdc3+0x334>
 8000d14:	f04f 0400 	mov.w	r4, #0
 8000d18:	f014 0fff 	tst.w	r4, #255	; 0xff
 8000d1c:	f040 8117 	bne.w	8000f4e <__divdc3+0x56a>
 8000d20:	2200      	movs	r2, #0
 8000d22:	2300      	movs	r3, #0
 8000d24:	f00b 4100 	and.w	r1, fp, #2147483648	; 0x80000000
 8000d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	ea43 0701 	orr.w	r7, r3, r1
 8000d30:	4616      	mov	r6, r2
 8000d32:	464b      	mov	r3, r9
 8000d34:	4642      	mov	r2, r8
 8000d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000d3a:	f7ff fc29 	bl	8000590 <__aeabi_dmul>
 8000d3e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8000d42:	4604      	mov	r4, r0
 8000d44:	460d      	mov	r5, r1
 8000d46:	4632      	mov	r2, r6
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	4659      	mov	r1, fp
 8000d4e:	f7ff fc1f 	bl	8000590 <__aeabi_dmul>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4620      	mov	r0, r4
 8000d58:	4629      	mov	r1, r5
 8000d5a:	f7ff fa63 	bl	8000224 <__adddf3>
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2300      	movs	r3, #0
 8000d62:	f7ff fc15 	bl	8000590 <__aeabi_dmul>
 8000d66:	4642      	mov	r2, r8
 8000d68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000d6c:	464b      	mov	r3, r9
 8000d6e:	4650      	mov	r0, sl
 8000d70:	4659      	mov	r1, fp
 8000d72:	f7ff fc0d 	bl	8000590 <__aeabi_dmul>
 8000d76:	4632      	mov	r2, r6
 8000d78:	4604      	mov	r4, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000d82:	f7ff fc05 	bl	8000590 <__aeabi_dmul>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fa47 	bl	8000220 <__aeabi_dsub>
 8000d92:	2200      	movs	r2, #0
 8000d94:	2300      	movs	r3, #0
 8000d96:	f7ff fbfb 	bl	8000590 <__aeabi_dmul>
 8000d9a:	4680      	mov	r8, r0
 8000d9c:	4689      	mov	r9, r1
 8000d9e:	e674      	b.n	8000a8a <__divdc3+0xa6>
 8000da0:	7ff00000 	.word	0x7ff00000
 8000da4:	fff00000 	.word	0xfff00000
 8000da8:	4622      	mov	r2, r4
 8000daa:	462b      	mov	r3, r5
 8000dac:	4620      	mov	r0, r4
 8000dae:	4629      	mov	r1, r5
 8000db0:	f7ff fa36 	bl	8000220 <__aeabi_dsub>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	f000 fa8e 	bl	80012d8 <__aeabi_dcmpeq>
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	f43f af20 	beq.w	8000c02 <__divdc3+0x21e>
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	465b      	mov	r3, fp
 8000dc6:	4650      	mov	r0, sl
 8000dc8:	4659      	mov	r1, fp
 8000dca:	f7ff fa29 	bl	8000220 <__aeabi_dsub>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	f000 fa81 	bl	80012d8 <__aeabi_dcmpeq>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	f43f af38 	beq.w	8000c4c <__divdc3+0x268>
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <__divdc3+0x570>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	9903      	ldr	r1, [sp, #12]
 8000de2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000dea:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8000dee:	4690      	mov	r8, r2
 8000df0:	460b      	mov	r3, r1
 8000df2:	4602      	mov	r2, r0
 8000df4:	f7ff fa14 	bl	8000220 <__aeabi_dsub>
 8000df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	ea47 0906 	orr.w	r9, r7, r6
 8000e08:	f04f 0601 	mov.w	r6, #1
 8000e0c:	f000 fa64 	bl	80012d8 <__aeabi_dcmpeq>
 8000e10:	b908      	cbnz	r0, 8000e16 <__divdc3+0x432>
 8000e12:	f04f 0600 	mov.w	r6, #0
 8000e16:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e1a:	d00e      	beq.n	8000e3a <__divdc3+0x456>
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0601 	mov.w	r6, #1
 8000e28:	f000 fa56 	bl	80012d8 <__aeabi_dcmpeq>
 8000e2c:	b108      	cbz	r0, 8000e32 <__divdc3+0x44e>
 8000e2e:	f04f 0600 	mov.w	r6, #0
 8000e32:	f016 0fff 	tst.w	r6, #255	; 0xff
 8000e36:	f040 8087 	bne.w	8000f48 <__divdc3+0x564>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	9901      	ldr	r1, [sp, #4]
 8000e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e48:	ea43 0701 	orr.w	r7, r3, r1
 8000e4c:	4616      	mov	r6, r2
 8000e4e:	464b      	mov	r3, r9
 8000e50:	4642      	mov	r2, r8
 8000e52:	4620      	mov	r0, r4
 8000e54:	4629      	mov	r1, r5
 8000e56:	f7ff fb9b 	bl	8000590 <__aeabi_dmul>
 8000e5a:	4632      	mov	r2, r6
 8000e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8000e60:	463b      	mov	r3, r7
 8000e62:	4650      	mov	r0, sl
 8000e64:	4659      	mov	r1, fp
 8000e66:	f7ff fb93 	bl	8000590 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000e72:	f7ff f9d7 	bl	8000224 <__adddf3>
 8000e76:	2200      	movs	r2, #0
 8000e78:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <__divdc3+0x574>)
 8000e7a:	f7ff fb89 	bl	8000590 <__aeabi_dmul>
 8000e7e:	4632      	mov	r2, r6
 8000e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000e84:	463b      	mov	r3, r7
 8000e86:	4620      	mov	r0, r4
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f7ff fb81 	bl	8000590 <__aeabi_dmul>
 8000e8e:	4642      	mov	r2, r8
 8000e90:	464b      	mov	r3, r9
 8000e92:	4604      	mov	r4, r0
 8000e94:	460d      	mov	r5, r1
 8000e96:	4650      	mov	r0, sl
 8000e98:	4659      	mov	r1, fp
 8000e9a:	f7ff fb79 	bl	8000590 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	4629      	mov	r1, r5
 8000ea6:	f7ff f9bb 	bl	8000220 <__aeabi_dsub>
 8000eaa:	2200      	movs	r2, #0
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <__divdc3+0x574>)
 8000eae:	f7ff fb6f 	bl	8000590 <__aeabi_dmul>
 8000eb2:	4680      	mov	r8, r0
 8000eb4:	4689      	mov	r9, r1
 8000eb6:	e5e8      	b.n	8000a8a <__divdc3+0xa6>
 8000eb8:	4622      	mov	r2, r4
 8000eba:	462b      	mov	r3, r5
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f7ff f9ae 	bl	8000220 <__aeabi_dsub>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	f000 fa06 	bl	80012d8 <__aeabi_dcmpeq>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	f43f ae98 	beq.w	8000c02 <__divdc3+0x21e>
 8000ed2:	4652      	mov	r2, sl
 8000ed4:	465b      	mov	r3, fp
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	4659      	mov	r1, fp
 8000eda:	f7ff f9a1 	bl	8000220 <__aeabi_dsub>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	f000 f9f9 	bl	80012d8 <__aeabi_dcmpeq>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	f43f aeb0 	beq.w	8000c4c <__divdc3+0x268>
 8000eec:	2200      	movs	r2, #0
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e776      	b.n	8000de0 <__divdc3+0x3fc>
 8000ef2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f000 f9ed 	bl	80012d8 <__aeabi_dcmpeq>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f43f adc3 	beq.w	8000a8a <__divdc3+0xa6>
 8000f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	f7ff f988 	bl	8000220 <__aeabi_dsub>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	f000 f9e0 	bl	80012d8 <__aeabi_dcmpeq>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	f43f adb6 	beq.w	8000a8a <__divdc3+0xa6>
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__divdc3+0x570>)
 8000f22:	e6d1      	b.n	8000cc8 <__divdc3+0x2e4>
 8000f24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	f000 f9d4 	bl	80012d8 <__aeabi_dcmpeq>
 8000f30:	2800      	cmp	r0, #0
 8000f32:	f47f adff 	bne.w	8000b34 <__divdc3+0x150>
 8000f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	f7ff f96f 	bl	8000220 <__aeabi_dsub>
 8000f42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000f46:	e65c      	b.n	8000c02 <__divdc3+0x21e>
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4b02      	ldr	r3, [pc, #8]	; (8000f54 <__divdc3+0x570>)
 8000f4c:	e777      	b.n	8000e3e <__divdc3+0x45a>
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b00      	ldr	r3, [pc, #0]	; (8000f54 <__divdc3+0x570>)
 8000f52:	e6e7      	b.n	8000d24 <__divdc3+0x340>
 8000f54:	3ff00000 	.word	0x3ff00000
 8000f58:	7ff00000 	.word	0x7ff00000

08000f5c <__udivmoddi4>:
 8000f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f60:	9e08      	ldr	r6, [sp, #32]
 8000f62:	4604      	mov	r4, r0
 8000f64:	4688      	mov	r8, r1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d14b      	bne.n	8001002 <__udivmoddi4+0xa6>
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	4615      	mov	r5, r2
 8000f6e:	d967      	bls.n	8001040 <__udivmoddi4+0xe4>
 8000f70:	fab2 f282 	clz	r2, r2
 8000f74:	b14a      	cbz	r2, 8000f8a <__udivmoddi4+0x2e>
 8000f76:	f1c2 0720 	rsb	r7, r2, #32
 8000f7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000f82:	4095      	lsls	r5, r2
 8000f84:	ea47 0803 	orr.w	r8, r7, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f8e:	0c23      	lsrs	r3, r4, #16
 8000f90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f94:	fa1f fc85 	uxth.w	ip, r5
 8000f98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x60>
 8000fa8:	18eb      	adds	r3, r5, r3
 8000faa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000fae:	f080 811b 	bcs.w	80011e8 <__udivmoddi4+0x28c>
 8000fb2:	4299      	cmp	r1, r3
 8000fb4:	f240 8118 	bls.w	80011e8 <__udivmoddi4+0x28c>
 8000fb8:	3f02      	subs	r7, #2
 8000fba:	442b      	add	r3, r5
 8000fbc:	1a5b      	subs	r3, r3, r1
 8000fbe:	b2a4      	uxth	r4, r4
 8000fc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fd0:	45a4      	cmp	ip, r4
 8000fd2:	d909      	bls.n	8000fe8 <__udivmoddi4+0x8c>
 8000fd4:	192c      	adds	r4, r5, r4
 8000fd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fda:	f080 8107 	bcs.w	80011ec <__udivmoddi4+0x290>
 8000fde:	45a4      	cmp	ip, r4
 8000fe0:	f240 8104 	bls.w	80011ec <__udivmoddi4+0x290>
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	442c      	add	r4, r5
 8000fe8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fec:	eba4 040c 	sub.w	r4, r4, ip
 8000ff0:	2700      	movs	r7, #0
 8000ff2:	b11e      	cbz	r6, 8000ffc <__udivmoddi4+0xa0>
 8000ff4:	40d4      	lsrs	r4, r2
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	428b      	cmp	r3, r1
 8001004:	d909      	bls.n	800101a <__udivmoddi4+0xbe>
 8001006:	2e00      	cmp	r6, #0
 8001008:	f000 80eb 	beq.w	80011e2 <__udivmoddi4+0x286>
 800100c:	2700      	movs	r7, #0
 800100e:	e9c6 0100 	strd	r0, r1, [r6]
 8001012:	4638      	mov	r0, r7
 8001014:	4639      	mov	r1, r7
 8001016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101a:	fab3 f783 	clz	r7, r3
 800101e:	2f00      	cmp	r7, #0
 8001020:	d147      	bne.n	80010b2 <__udivmoddi4+0x156>
 8001022:	428b      	cmp	r3, r1
 8001024:	d302      	bcc.n	800102c <__udivmoddi4+0xd0>
 8001026:	4282      	cmp	r2, r0
 8001028:	f200 80fa 	bhi.w	8001220 <__udivmoddi4+0x2c4>
 800102c:	1a84      	subs	r4, r0, r2
 800102e:	eb61 0303 	sbc.w	r3, r1, r3
 8001032:	2001      	movs	r0, #1
 8001034:	4698      	mov	r8, r3
 8001036:	2e00      	cmp	r6, #0
 8001038:	d0e0      	beq.n	8000ffc <__udivmoddi4+0xa0>
 800103a:	e9c6 4800 	strd	r4, r8, [r6]
 800103e:	e7dd      	b.n	8000ffc <__udivmoddi4+0xa0>
 8001040:	b902      	cbnz	r2, 8001044 <__udivmoddi4+0xe8>
 8001042:	deff      	udf	#255	; 0xff
 8001044:	fab2 f282 	clz	r2, r2
 8001048:	2a00      	cmp	r2, #0
 800104a:	f040 808f 	bne.w	800116c <__udivmoddi4+0x210>
 800104e:	1b49      	subs	r1, r1, r5
 8001050:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001054:	fa1f f885 	uxth.w	r8, r5
 8001058:	2701      	movs	r7, #1
 800105a:	fbb1 fcfe 	udiv	ip, r1, lr
 800105e:	0c23      	lsrs	r3, r4, #16
 8001060:	fb0e 111c 	mls	r1, lr, ip, r1
 8001064:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001068:	fb08 f10c 	mul.w	r1, r8, ip
 800106c:	4299      	cmp	r1, r3
 800106e:	d907      	bls.n	8001080 <__udivmoddi4+0x124>
 8001070:	18eb      	adds	r3, r5, r3
 8001072:	f10c 30ff 	add.w	r0, ip, #4294967295
 8001076:	d202      	bcs.n	800107e <__udivmoddi4+0x122>
 8001078:	4299      	cmp	r1, r3
 800107a:	f200 80cd 	bhi.w	8001218 <__udivmoddi4+0x2bc>
 800107e:	4684      	mov	ip, r0
 8001080:	1a59      	subs	r1, r3, r1
 8001082:	b2a3      	uxth	r3, r4
 8001084:	fbb1 f0fe 	udiv	r0, r1, lr
 8001088:	fb0e 1410 	mls	r4, lr, r0, r1
 800108c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001090:	fb08 f800 	mul.w	r8, r8, r0
 8001094:	45a0      	cmp	r8, r4
 8001096:	d907      	bls.n	80010a8 <__udivmoddi4+0x14c>
 8001098:	192c      	adds	r4, r5, r4
 800109a:	f100 33ff 	add.w	r3, r0, #4294967295
 800109e:	d202      	bcs.n	80010a6 <__udivmoddi4+0x14a>
 80010a0:	45a0      	cmp	r8, r4
 80010a2:	f200 80b6 	bhi.w	8001212 <__udivmoddi4+0x2b6>
 80010a6:	4618      	mov	r0, r3
 80010a8:	eba4 0408 	sub.w	r4, r4, r8
 80010ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010b0:	e79f      	b.n	8000ff2 <__udivmoddi4+0x96>
 80010b2:	f1c7 0c20 	rsb	ip, r7, #32
 80010b6:	40bb      	lsls	r3, r7
 80010b8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010bc:	ea4e 0e03 	orr.w	lr, lr, r3
 80010c0:	fa01 f407 	lsl.w	r4, r1, r7
 80010c4:	fa20 f50c 	lsr.w	r5, r0, ip
 80010c8:	fa21 f30c 	lsr.w	r3, r1, ip
 80010cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010d0:	4325      	orrs	r5, r4
 80010d2:	fbb3 f9f8 	udiv	r9, r3, r8
 80010d6:	0c2c      	lsrs	r4, r5, #16
 80010d8:	fb08 3319 	mls	r3, r8, r9, r3
 80010dc:	fa1f fa8e 	uxth.w	sl, lr
 80010e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010e4:	fb09 f40a 	mul.w	r4, r9, sl
 80010e8:	429c      	cmp	r4, r3
 80010ea:	fa02 f207 	lsl.w	r2, r2, r7
 80010ee:	fa00 f107 	lsl.w	r1, r0, r7
 80010f2:	d90b      	bls.n	800110c <__udivmoddi4+0x1b0>
 80010f4:	eb1e 0303 	adds.w	r3, lr, r3
 80010f8:	f109 30ff 	add.w	r0, r9, #4294967295
 80010fc:	f080 8087 	bcs.w	800120e <__udivmoddi4+0x2b2>
 8001100:	429c      	cmp	r4, r3
 8001102:	f240 8084 	bls.w	800120e <__udivmoddi4+0x2b2>
 8001106:	f1a9 0902 	sub.w	r9, r9, #2
 800110a:	4473      	add	r3, lr
 800110c:	1b1b      	subs	r3, r3, r4
 800110e:	b2ad      	uxth	r5, r5
 8001110:	fbb3 f0f8 	udiv	r0, r3, r8
 8001114:	fb08 3310 	mls	r3, r8, r0, r3
 8001118:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800111c:	fb00 fa0a 	mul.w	sl, r0, sl
 8001120:	45a2      	cmp	sl, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x1da>
 8001124:	eb1e 0404 	adds.w	r4, lr, r4
 8001128:	f100 33ff 	add.w	r3, r0, #4294967295
 800112c:	d26b      	bcs.n	8001206 <__udivmoddi4+0x2aa>
 800112e:	45a2      	cmp	sl, r4
 8001130:	d969      	bls.n	8001206 <__udivmoddi4+0x2aa>
 8001132:	3802      	subs	r0, #2
 8001134:	4474      	add	r4, lr
 8001136:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800113a:	fba0 8902 	umull	r8, r9, r0, r2
 800113e:	eba4 040a 	sub.w	r4, r4, sl
 8001142:	454c      	cmp	r4, r9
 8001144:	46c2      	mov	sl, r8
 8001146:	464b      	mov	r3, r9
 8001148:	d354      	bcc.n	80011f4 <__udivmoddi4+0x298>
 800114a:	d051      	beq.n	80011f0 <__udivmoddi4+0x294>
 800114c:	2e00      	cmp	r6, #0
 800114e:	d069      	beq.n	8001224 <__udivmoddi4+0x2c8>
 8001150:	ebb1 050a 	subs.w	r5, r1, sl
 8001154:	eb64 0403 	sbc.w	r4, r4, r3
 8001158:	fa04 fc0c 	lsl.w	ip, r4, ip
 800115c:	40fd      	lsrs	r5, r7
 800115e:	40fc      	lsrs	r4, r7
 8001160:	ea4c 0505 	orr.w	r5, ip, r5
 8001164:	e9c6 5400 	strd	r5, r4, [r6]
 8001168:	2700      	movs	r7, #0
 800116a:	e747      	b.n	8000ffc <__udivmoddi4+0xa0>
 800116c:	f1c2 0320 	rsb	r3, r2, #32
 8001170:	fa20 f703 	lsr.w	r7, r0, r3
 8001174:	4095      	lsls	r5, r2
 8001176:	fa01 f002 	lsl.w	r0, r1, r2
 800117a:	fa21 f303 	lsr.w	r3, r1, r3
 800117e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001182:	4338      	orrs	r0, r7
 8001184:	0c01      	lsrs	r1, r0, #16
 8001186:	fbb3 f7fe 	udiv	r7, r3, lr
 800118a:	fa1f f885 	uxth.w	r8, r5
 800118e:	fb0e 3317 	mls	r3, lr, r7, r3
 8001192:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001196:	fb07 f308 	mul.w	r3, r7, r8
 800119a:	428b      	cmp	r3, r1
 800119c:	fa04 f402 	lsl.w	r4, r4, r2
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x256>
 80011a2:	1869      	adds	r1, r5, r1
 80011a4:	f107 3cff 	add.w	ip, r7, #4294967295
 80011a8:	d22f      	bcs.n	800120a <__udivmoddi4+0x2ae>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d92d      	bls.n	800120a <__udivmoddi4+0x2ae>
 80011ae:	3f02      	subs	r7, #2
 80011b0:	4429      	add	r1, r5
 80011b2:	1acb      	subs	r3, r1, r3
 80011b4:	b281      	uxth	r1, r0
 80011b6:	fbb3 f0fe 	udiv	r0, r3, lr
 80011ba:	fb0e 3310 	mls	r3, lr, r0, r3
 80011be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011c2:	fb00 f308 	mul.w	r3, r0, r8
 80011c6:	428b      	cmp	r3, r1
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x27e>
 80011ca:	1869      	adds	r1, r5, r1
 80011cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80011d0:	d217      	bcs.n	8001202 <__udivmoddi4+0x2a6>
 80011d2:	428b      	cmp	r3, r1
 80011d4:	d915      	bls.n	8001202 <__udivmoddi4+0x2a6>
 80011d6:	3802      	subs	r0, #2
 80011d8:	4429      	add	r1, r5
 80011da:	1ac9      	subs	r1, r1, r3
 80011dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011e0:	e73b      	b.n	800105a <__udivmoddi4+0xfe>
 80011e2:	4637      	mov	r7, r6
 80011e4:	4630      	mov	r0, r6
 80011e6:	e709      	b.n	8000ffc <__udivmoddi4+0xa0>
 80011e8:	4607      	mov	r7, r0
 80011ea:	e6e7      	b.n	8000fbc <__udivmoddi4+0x60>
 80011ec:	4618      	mov	r0, r3
 80011ee:	e6fb      	b.n	8000fe8 <__udivmoddi4+0x8c>
 80011f0:	4541      	cmp	r1, r8
 80011f2:	d2ab      	bcs.n	800114c <__udivmoddi4+0x1f0>
 80011f4:	ebb8 0a02 	subs.w	sl, r8, r2
 80011f8:	eb69 020e 	sbc.w	r2, r9, lr
 80011fc:	3801      	subs	r0, #1
 80011fe:	4613      	mov	r3, r2
 8001200:	e7a4      	b.n	800114c <__udivmoddi4+0x1f0>
 8001202:	4660      	mov	r0, ip
 8001204:	e7e9      	b.n	80011da <__udivmoddi4+0x27e>
 8001206:	4618      	mov	r0, r3
 8001208:	e795      	b.n	8001136 <__udivmoddi4+0x1da>
 800120a:	4667      	mov	r7, ip
 800120c:	e7d1      	b.n	80011b2 <__udivmoddi4+0x256>
 800120e:	4681      	mov	r9, r0
 8001210:	e77c      	b.n	800110c <__udivmoddi4+0x1b0>
 8001212:	3802      	subs	r0, #2
 8001214:	442c      	add	r4, r5
 8001216:	e747      	b.n	80010a8 <__udivmoddi4+0x14c>
 8001218:	f1ac 0c02 	sub.w	ip, ip, #2
 800121c:	442b      	add	r3, r5
 800121e:	e72f      	b.n	8001080 <__udivmoddi4+0x124>
 8001220:	4638      	mov	r0, r7
 8001222:	e708      	b.n	8001036 <__udivmoddi4+0xda>
 8001224:	4637      	mov	r7, r6
 8001226:	e6e9      	b.n	8000ffc <__udivmoddi4+0xa0>

08001228 <__aeabi_idiv0>:
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <__gedf2>:
 800122c:	f04f 3cff 	mov.w	ip, #4294967295
 8001230:	e006      	b.n	8001240 <__cmpdf2+0x4>
 8001232:	bf00      	nop

08001234 <__ledf2>:
 8001234:	f04f 0c01 	mov.w	ip, #1
 8001238:	e002      	b.n	8001240 <__cmpdf2+0x4>
 800123a:	bf00      	nop

0800123c <__cmpdf2>:
 800123c:	f04f 0c01 	mov.w	ip, #1
 8001240:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001244:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001248:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800124c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001250:	bf18      	it	ne
 8001252:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001256:	d01b      	beq.n	8001290 <__cmpdf2+0x54>
 8001258:	b001      	add	sp, #4
 800125a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800125e:	bf0c      	ite	eq
 8001260:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001264:	ea91 0f03 	teqne	r1, r3
 8001268:	bf02      	ittt	eq
 800126a:	ea90 0f02 	teqeq	r0, r2
 800126e:	2000      	moveq	r0, #0
 8001270:	4770      	bxeq	lr
 8001272:	f110 0f00 	cmn.w	r0, #0
 8001276:	ea91 0f03 	teq	r1, r3
 800127a:	bf58      	it	pl
 800127c:	4299      	cmppl	r1, r3
 800127e:	bf08      	it	eq
 8001280:	4290      	cmpeq	r0, r2
 8001282:	bf2c      	ite	cs
 8001284:	17d8      	asrcs	r0, r3, #31
 8001286:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800128a:	f040 0001 	orr.w	r0, r0, #1
 800128e:	4770      	bx	lr
 8001290:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001298:	d102      	bne.n	80012a0 <__cmpdf2+0x64>
 800129a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800129e:	d107      	bne.n	80012b0 <__cmpdf2+0x74>
 80012a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012a8:	d1d6      	bne.n	8001258 <__cmpdf2+0x1c>
 80012aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80012ae:	d0d3      	beq.n	8001258 <__cmpdf2+0x1c>
 80012b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <__aeabi_cdrcmple>:
 80012b8:	4684      	mov	ip, r0
 80012ba:	4610      	mov	r0, r2
 80012bc:	4662      	mov	r2, ip
 80012be:	468c      	mov	ip, r1
 80012c0:	4619      	mov	r1, r3
 80012c2:	4663      	mov	r3, ip
 80012c4:	e000      	b.n	80012c8 <__aeabi_cdcmpeq>
 80012c6:	bf00      	nop

080012c8 <__aeabi_cdcmpeq>:
 80012c8:	b501      	push	{r0, lr}
 80012ca:	f7ff ffb7 	bl	800123c <__cmpdf2>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	bf48      	it	mi
 80012d2:	f110 0f00 	cmnmi.w	r0, #0
 80012d6:	bd01      	pop	{r0, pc}

080012d8 <__aeabi_dcmpeq>:
 80012d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012dc:	f7ff fff4 	bl	80012c8 <__aeabi_cdcmpeq>
 80012e0:	bf0c      	ite	eq
 80012e2:	2001      	moveq	r0, #1
 80012e4:	2000      	movne	r0, #0
 80012e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80012ea:	bf00      	nop

080012ec <__aeabi_dcmplt>:
 80012ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012f0:	f7ff ffea 	bl	80012c8 <__aeabi_cdcmpeq>
 80012f4:	bf34      	ite	cc
 80012f6:	2001      	movcc	r0, #1
 80012f8:	2000      	movcs	r0, #0
 80012fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80012fe:	bf00      	nop

08001300 <__aeabi_dcmple>:
 8001300:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001304:	f7ff ffe0 	bl	80012c8 <__aeabi_cdcmpeq>
 8001308:	bf94      	ite	ls
 800130a:	2001      	movls	r0, #1
 800130c:	2000      	movhi	r0, #0
 800130e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001312:	bf00      	nop

08001314 <__aeabi_dcmpge>:
 8001314:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001318:	f7ff ffce 	bl	80012b8 <__aeabi_cdrcmple>
 800131c:	bf94      	ite	ls
 800131e:	2001      	movls	r0, #1
 8001320:	2000      	movhi	r0, #0
 8001322:	f85d fb08 	ldr.w	pc, [sp], #8
 8001326:	bf00      	nop

08001328 <__aeabi_dcmpgt>:
 8001328:	f84d ed08 	str.w	lr, [sp, #-8]!
 800132c:	f7ff ffc4 	bl	80012b8 <__aeabi_cdrcmple>
 8001330:	bf34      	ite	cc
 8001332:	2001      	movcc	r0, #1
 8001334:	2000      	movcs	r0, #0
 8001336:	f85d fb08 	ldr.w	pc, [sp], #8
 800133a:	bf00      	nop

0800133c <MenuHandler>:
{
		return Menu;
}

eSystemState MenuHandler(eSystemEvent Event)
{
 800133c:	b490      	push	{r4, r7}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	if (Event == Btn_1)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10a      	bne.n	8001362 <MenuHandler+0x26>
	{
		strcpy(Compo, "C");
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MenuHandler+0x74>)
 800134e:	2243      	movs	r2, #67	; 0x43
 8001350:	801a      	strh	r2, [r3, #0]
		val = C;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MenuHandler+0x78>)
 8001354:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <MenuHandler+0x7c>)
 800135a:	e9c2 3400 	strd	r3, r4, [r2]
		return Affichage_Val;
 800135e:	2302      	movs	r3, #2
 8001360:	e021      	b.n	80013a6 <MenuHandler+0x6a>
	}
	if (Event == Btn_2)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d10a      	bne.n	800137e <MenuHandler+0x42>
	{
		strcpy(Compo, "L");
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MenuHandler+0x74>)
 800136a:	224c      	movs	r2, #76	; 0x4c
 800136c:	801a      	strh	r2, [r3, #0]
		val = L;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MenuHandler+0x80>)
 8001370:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <MenuHandler+0x7c>)
 8001376:	e9c2 3400 	strd	r3, r4, [r2]
		return Affichage_Val;
 800137a:	2302      	movs	r3, #2
 800137c:	e013      	b.n	80013a6 <MenuHandler+0x6a>
	}
	if (Event == Btn_3)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d10a      	bne.n	800139a <MenuHandler+0x5e>
	{
		strcpy(Compo, "R");
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MenuHandler+0x74>)
 8001386:	2252      	movs	r2, #82	; 0x52
 8001388:	801a      	strh	r2, [r3, #0]
		val = R;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MenuHandler+0x84>)
 800138c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001390:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <MenuHandler+0x7c>)
 8001392:	e9c2 3400 	strd	r3, r4, [r2]
		return Affichage_Val;
 8001396:	2302      	movs	r3, #2
 8001398:	e005      	b.n	80013a6 <MenuHandler+0x6a>
	}
	if (Event == Btn_4)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d101      	bne.n	80013a4 <MenuHandler+0x68>
		return Reglages;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <MenuHandler+0x6a>
	else
		return Menu;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc90      	pop	{r4, r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000070 	.word	0x20000070
 80013b4:	200004e0 	.word	0x200004e0
 80013b8:	200004f8 	.word	0x200004f8
 80013bc:	20000508 	.word	0x20000508
 80013c0:	20000520 	.word	0x20000520

080013c4 <AffHandler>:

eSystemState AffHandler(eSystemEvent Event)
{
 80013c4:	b590      	push	{r4, r7, lr}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	if (Event == Btn_retour)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d111      	bne.n	80013f8 <AffHandler+0x34>
	{
		val = 0;
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <AffHandler+0x40>)
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	f04f 0400 	mov.w	r4, #0
 80013de:	e9c2 3400 	strd	r3, r4, [r2]
		memset(Compo,0,strlen(Compo));
 80013e2:	4809      	ldr	r0, [pc, #36]	; (8001408 <AffHandler+0x44>)
 80013e4:	f7fe ff10 	bl	8000208 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	2100      	movs	r1, #0
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <AffHandler+0x44>)
 80013f0:	f002 fe50 	bl	8004094 <memset>
		return Menu;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e000      	b.n	80013fa <AffHandler+0x36>
	}
	else
		return Affichage_Val;
 80013f8:	2302      	movs	r3, #2
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	200004f8 	.word	0x200004f8
 8001408:	20000070 	.word	0x20000070

0800140c <RegHandler>:

eSystemState RegHandler(eSystemEvent Event)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	if (Event == Btn_retour)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d101      	bne.n	8001420 <RegHandler+0x14>
		return Menu;
 800141c:	2300      	movs	r3, #0
 800141e:	e00f      	b.n	8001440 <RegHandler+0x34>
	if (Event == Btn_1)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <RegHandler+0x1e>
		return Reglage_Freq;
 8001426:	2303      	movs	r3, #3
 8001428:	e00a      	b.n	8001440 <RegHandler+0x34>
	if (Event == Btn_2)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <RegHandler+0x28>
		return Choix_Calib;
 8001430:	2305      	movs	r3, #5
 8001432:	e005      	b.n	8001440 <RegHandler+0x34>
	if (Event == Btn_3)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d101      	bne.n	800143e <RegHandler+0x32>
		return Autres_Reglages;
 800143a:	2304      	movs	r3, #4
 800143c:	e000      	b.n	8001440 <RegHandler+0x34>
	else
		return Reglages;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <Reg_FreqHandler>:

eSystemState Reg_FreqHandler(eSystemEvent Event)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	if (Event == Btn_retour)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d101      	bne.n	8001460 <Reg_FreqHandler+0x14>
		return Reglages;
 800145c:	2301      	movs	r3, #1
 800145e:	e014      	b.n	800148a <Reg_FreqHandler+0x3e>
	else
	{
		if (Event == Btn_1)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d108      	bne.n	8001478 <Reg_FreqHandler+0x2c>
			if (freq > 0)
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <Reg_FreqHandler+0x4c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dd04      	ble.n	8001478 <Reg_FreqHandler+0x2c>
				freq = freq - 1;
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <Reg_FreqHandler+0x4c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <Reg_FreqHandler+0x4c>)
 8001476:	6013      	str	r3, [r2, #0]
		if (Event == Btn_2)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d104      	bne.n	8001488 <Reg_FreqHandler+0x3c>
			freq = freq + 1;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <Reg_FreqHandler+0x4c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <Reg_FreqHandler+0x4c>)
 8001486:	6013      	str	r3, [r2, #0]
		return Reglage_Freq;
 8001488:	2303      	movs	r3, #3
	}
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000060 	.word	0x20000060

0800149c <Autres_RegHandler>:


eSystemState Autres_RegHandler(eSystemEvent Event)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if (Event == Btn_retour)
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d101      	bne.n	80014b0 <Autres_RegHandler+0x14>
		return Reglages;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <Autres_RegHandler+0x16>
	else
		return Autres_Reglages;
 80014b0:	2304      	movs	r3, #4
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <Choix_Calib_ConfirmHandler>:

eSystemState Choix_Calib_ConfirmHandler(eSystemEvent Event)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
	if (Event == Btn_retour)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d101      	bne.n	80014d4 <Choix_Calib_ConfirmHandler+0x14>
		return Reglages;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e01f      	b.n	8001514 <Choix_Calib_ConfirmHandler+0x54>
	if (Event == Btn_1)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <Choix_Calib_ConfirmHandler+0x1e>
	{
		return Reglages;
 80014da:	2301      	movs	r3, #1
 80014dc:	e01a      	b.n	8001514 <Choix_Calib_ConfirmHandler+0x54>
	}
	if (Event == Btn_2)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d109      	bne.n	80014f8 <Choix_Calib_ConfirmHandler+0x38>
	{
		strcpy(Calib, "OC");
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <Choix_Calib_ConfirmHandler+0x60>)
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <Choix_Calib_ConfirmHandler+0x64>)
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	4611      	mov	r1, r2
 80014ec:	8019      	strh	r1, [r3, #0]
 80014ee:	3302      	adds	r3, #2
 80014f0:	0c12      	lsrs	r2, r2, #16
 80014f2:	701a      	strb	r2, [r3, #0]
		return Reglages;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e00d      	b.n	8001514 <Choix_Calib_ConfirmHandler+0x54>
	}
	if (Event == Btn_3)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d109      	bne.n	8001512 <Choix_Calib_ConfirmHandler+0x52>
	{
		strcpy(Calib, "CC");
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <Choix_Calib_ConfirmHandler+0x60>)
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <Choix_Calib_ConfirmHandler+0x68>)
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	4611      	mov	r1, r2
 8001506:	8019      	strh	r1, [r3, #0]
 8001508:	3302      	adds	r3, #2
 800150a:	0c12      	lsrs	r2, r2, #16
 800150c:	701a      	strb	r2, [r3, #0]
		return Reglages;
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <Choix_Calib_ConfirmHandler+0x54>
	}
	else
		return Choix_Calib;
 8001512:	2305      	movs	r3, #5
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000064 	.word	0x20000064
 8001524:	080040c0 	.word	0x080040c0
 8001528:	080040c4 	.word	0x080040c4
 800152c:	00000000 	.word	0x00000000

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fc88 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f97c 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 fa58 	bl	80019f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001540:	f000 f9fc 	bl	800193c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001544:	f000 fa24 	bl	8001990 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  u = -1.1091e-07 + 3.5994e-09 * I;
 8001548:	4aa9      	ldr	r2, [pc, #676]	; (80017f0 <main+0x2c0>)
 800154a:	49aa      	ldr	r1, [pc, #680]	; (80017f4 <main+0x2c4>)
 800154c:	e9d1 3400 	ldrd	r3, r4, [r1]
 8001550:	e9c2 3400 	strd	r3, r4, [r2]
 8001554:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8001558:	e9c2 3402 	strd	r3, r4, [r2, #8]
  i = -0.0013 - 0.0390 * I;
 800155c:	4aa6      	ldr	r2, [pc, #664]	; (80017f8 <main+0x2c8>)
 800155e:	49a7      	ldr	r1, [pc, #668]	; (80017fc <main+0x2cc>)
 8001560:	e9d1 3400 	ldrd	r3, r4, [r1]
 8001564:	e9c2 3400 	strd	r3, r4, [r2]
 8001568:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800156c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001570:	4b9f      	ldr	r3, [pc, #636]	; (80017f0 <main+0x2c0>)
 8001572:	ed93 7b00 	vldr	d7, [r3]
 8001576:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <main+0x2c0>)
 8001578:	ed93 6b02 	vldr	d6, [r3, #8]
 800157c:	4b9e      	ldr	r3, [pc, #632]	; (80017f8 <main+0x2c8>)
 800157e:	ed93 5b00 	vldr	d5, [r3]
 8001582:	4b9d      	ldr	r3, [pc, #628]	; (80017f8 <main+0x2c8>)
 8001584:	ed93 4b02 	vldr	d4, [r3, #8]
  Z = u/i;
 8001588:	eeb0 3a44 	vmov.f32	s6, s8
 800158c:	eef0 3a64 	vmov.f32	s7, s9
 8001590:	eeb0 2a45 	vmov.f32	s4, s10
 8001594:	eef0 2a65 	vmov.f32	s5, s11
 8001598:	eeb0 1a46 	vmov.f32	s2, s12
 800159c:	eef0 1a66 	vmov.f32	s3, s13
 80015a0:	eeb0 0a47 	vmov.f32	s0, s14
 80015a4:	eef0 0a67 	vmov.f32	s1, s15
 80015a8:	f7ff fa1c 	bl	80009e4 <__divdc3>
 80015ac:	eeb0 6a40 	vmov.f32	s12, s0
 80015b0:	eef0 6a60 	vmov.f32	s13, s1
 80015b4:	eeb0 7a41 	vmov.f32	s14, s2
 80015b8:	eef0 7a61 	vmov.f32	s15, s3
 80015bc:	ec52 1b16 	vmov	r1, r2, d6
 80015c0:	ec54 3b17 	vmov	r3, r4, d7
 80015c4:	488e      	ldr	r0, [pc, #568]	; (8001800 <main+0x2d0>)
 80015c6:	e9c0 1200 	strd	r1, r2, [r0]
 80015ca:	4a8d      	ldr	r2, [pc, #564]	; (8001800 <main+0x2d0>)
 80015cc:	e9c2 3402 	strd	r3, r4, [r2, #8]

  R = creal(Z);
 80015d0:	4b8b      	ldr	r3, [pc, #556]	; (8001800 <main+0x2d0>)
 80015d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015d6:	4a8b      	ldr	r2, [pc, #556]	; (8001804 <main+0x2d4>)
 80015d8:	e9c2 3400 	strd	r3, r4, [r2]
  im = cimag(Z);
 80015dc:	4b88      	ldr	r3, [pc, #544]	; (8001800 <main+0x2d0>)
 80015de:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80015e2:	4a89      	ldr	r2, [pc, #548]	; (8001808 <main+0x2d8>)
 80015e4:	e9c2 3400 	strd	r3, r4, [r2]
 80015e8:	4a87      	ldr	r2, [pc, #540]	; (8001808 <main+0x2d8>)
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	f04f 0400 	mov.w	r4, #0
 80015f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  L = creal(im) / (2*pi*Ftest);
 80015f6:	4b84      	ldr	r3, [pc, #528]	; (8001808 <main+0x2d8>)
 80015f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015fc:	4b83      	ldr	r3, [pc, #524]	; (800180c <main+0x2dc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff5b 	bl	80004bc <__aeabi_i2d>
 8001606:	a376      	add	r3, pc, #472	; (adr r3, 80017e0 <main+0x2b0>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe ffc0 	bl	8000590 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7ff f8e4 	bl	80007e4 <__aeabi_ddiv>
 800161c:	4603      	mov	r3, r0
 800161e:	460c      	mov	r4, r1
 8001620:	4a7b      	ldr	r2, [pc, #492]	; (8001810 <main+0x2e0>)
 8001622:	e9c2 3400 	strd	r3, r4, [r2]
  C = -1/(creal(im) * 2*pi*Ftest);
 8001626:	4b78      	ldr	r3, [pc, #480]	; (8001808 <main+0x2d8>)
 8001628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	f7fe fdf8 	bl	8000224 <__adddf3>
 8001634:	4603      	mov	r3, r0
 8001636:	460c      	mov	r4, r1
 8001638:	4618      	mov	r0, r3
 800163a:	4621      	mov	r1, r4
 800163c:	a36a      	add	r3, pc, #424	; (adr r3, 80017e8 <main+0x2b8>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffa5 	bl	8000590 <__aeabi_dmul>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	4625      	mov	r5, r4
 800164c:	461c      	mov	r4, r3
 800164e:	4b6f      	ldr	r3, [pc, #444]	; (800180c <main+0x2dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff32 	bl	80004bc <__aeabi_i2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4620      	mov	r0, r4
 800165e:	4629      	mov	r1, r5
 8001660:	f7fe ff96 	bl	8000590 <__aeabi_dmul>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	461a      	mov	r2, r3
 800166a:	4623      	mov	r3, r4
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	4968      	ldr	r1, [pc, #416]	; (8001814 <main+0x2e4>)
 8001672:	f7ff f8b7 	bl	80007e4 <__aeabi_ddiv>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	4a67      	ldr	r2, [pc, #412]	; (8001818 <main+0x2e8>)
 800167c:	e9c2 3400 	strd	r3, r4, [r2]

  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2101      	movs	r1, #1
 8001684:	4865      	ldr	r0, [pc, #404]	; (800181c <main+0x2ec>)
 8001686:	f000 ff03 	bl	8002490 <HAL_GPIO_WritePin>

  HAL_Delay(2000);
 800168a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800168e:	f000 fc4d 	bl	8001f2c <HAL_Delay>

  eState = Menu;
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <main+0x2f0>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2101      	movs	r1, #1
 800169c:	485f      	ldr	r0, [pc, #380]	; (800181c <main+0x2ec>)
 800169e:	f000 fef7 	bl	8002490 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80016a2:	2064      	movs	r0, #100	; 0x64
 80016a4:	f000 fc42 	bl	8001f2c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	485b      	ldr	r0, [pc, #364]	; (800181c <main+0x2ec>)
 80016ae:	f000 feef 	bl	8002490 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f000 fc3a 	bl	8001f2c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  eNewEvent = Read_Event();
 80016b8:	f000 fa56 	bl	8001b68 <Read_Event>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b58      	ldr	r3, [pc, #352]	; (8001824 <main+0x2f4>)
 80016c2:	701a      	strb	r2, [r3, #0]

	  if((eState < Last_State) && (eNewEvent < Last_Event) && (asStateMachine[eState].pfStateMachineEvnentHandler != NULL) && debounce == false)
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <main+0x2f0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d8f5      	bhi.n	80016b8 <main+0x188>
 80016cc:	4b55      	ldr	r3, [pc, #340]	; (8001824 <main+0x2f4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d8f1      	bhi.n	80016b8 <main+0x188>
 80016d4:	4b52      	ldr	r3, [pc, #328]	; (8001820 <main+0x2f0>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4a53      	ldr	r2, [pc, #332]	; (8001828 <main+0x2f8>)
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0e9      	beq.n	80016b8 <main+0x188>
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <main+0x2fc>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0e2      	beq.n	80016b8 <main+0x188>
	  {
		  debounce = true;
 80016f2:	4b4e      	ldr	r3, [pc, #312]	; (800182c <main+0x2fc>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
		  // function call as per the state and event and return the next state of the finite state machine
		  eNextState = (*asStateMachine[eState].pfStateMachineEvnentHandler)(eNewEvent);
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <main+0x2f0>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4a4a      	ldr	r2, [pc, #296]	; (8001828 <main+0x2f8>)
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a47      	ldr	r2, [pc, #284]	; (8001824 <main+0x2f4>)
 8001706:	7812      	ldrb	r2, [r2, #0]
 8001708:	4610      	mov	r0, r2
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <main+0x300>)
 8001712:	701a      	strb	r2, [r3, #0]

		  if (eNextState != eState)
 8001714:	4b46      	ldr	r3, [pc, #280]	; (8001830 <main+0x300>)
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	4b41      	ldr	r3, [pc, #260]	; (8001820 <main+0x2f0>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d057      	beq.n	80017d0 <main+0x2a0>
		  {
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f244 0181 	movw	r1, #16513	; 0x4081
 8001726:	483d      	ldr	r0, [pc, #244]	; (800181c <main+0x2ec>)
 8001728:	f000 feb2 	bl	8002490 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 800172c:	2064      	movs	r0, #100	; 0x64
 800172e:	f000 fbfd 	bl	8001f2c <HAL_Delay>

			  switch (eNextState)
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <main+0x300>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b06      	cmp	r3, #6
 8001738:	d84a      	bhi.n	80017d0 <main+0x2a0>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <main+0x210>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	0800175d 	.word	0x0800175d
 8001744:	0800176f 	.word	0x0800176f
 8001748:	08001781 	.word	0x08001781
 800174c:	08001795 	.word	0x08001795
 8001750:	080017a9 	.word	0x080017a9
 8001754:	080017bd 	.word	0x080017bd
 8001758:	080017d1 	.word	0x080017d1
			  {
			  case Menu:
				  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	482e      	ldr	r0, [pc, #184]	; (800181c <main+0x2ec>)
 8001762:	f000 fe95 	bl	8002490 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001766:	2064      	movs	r0, #100	; 0x64
 8001768:	f000 fbe0 	bl	8001f2c <HAL_Delay>
				  break;
 800176c:	e030      	b.n	80017d0 <main+0x2a0>
			  case Reglages:
				  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	2181      	movs	r1, #129	; 0x81
 8001772:	482a      	ldr	r0, [pc, #168]	; (800181c <main+0x2ec>)
 8001774:	f000 fe8c 	bl	8002490 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f000 fbd7 	bl	8001f2c <HAL_Delay>
				  break;
 800177e:	e027      	b.n	80017d0 <main+0x2a0>
			  case Affichage_Val:
				  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001786:	4825      	ldr	r0, [pc, #148]	; (800181c <main+0x2ec>)
 8001788:	f000 fe82 	bl	8002490 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f000 fbcd 	bl	8001f2c <HAL_Delay>
				  break;
 8001792:	e01d      	b.n	80017d0 <main+0x2a0>
			  case Reglage_Freq:
				  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	f244 0101 	movw	r1, #16385	; 0x4001
 800179a:	4820      	ldr	r0, [pc, #128]	; (800181c <main+0x2ec>)
 800179c:	f000 fe78 	bl	8002490 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80017a0:	2064      	movs	r0, #100	; 0x64
 80017a2:	f000 fbc3 	bl	8001f2c <HAL_Delay>
				  break;
 80017a6:	e013      	b.n	80017d0 <main+0x2a0>
			  case Autres_Reglages:
				  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <main+0x2ec>)
 80017b0:	f000 fe6e 	bl	8002490 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80017b4:	2064      	movs	r0, #100	; 0x64
 80017b6:	f000 fbb9 	bl	8001f2c <HAL_Delay>
				  break;
 80017ba:	e009      	b.n	80017d0 <main+0x2a0>
			  case Choix_Calib:
				  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f244 0181 	movw	r1, #16513	; 0x4081
 80017c2:	4816      	ldr	r0, [pc, #88]	; (800181c <main+0x2ec>)
 80017c4:	f000 fe64 	bl	8002490 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80017c8:	2064      	movs	r0, #100	; 0x64
 80017ca:	f000 fbaf 	bl	8001f2c <HAL_Delay>
				  break;
 80017ce:	bf00      	nop
			  case Last_State:
				  break;
			  }
		  }

		  eState = eNextState;
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <main+0x300>)
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <main+0x2f0>)
 80017d6:	701a      	strb	r2, [r3, #0]
	  eNewEvent = Read_Event();
 80017d8:	e76e      	b.n	80016b8 <main+0x188>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	54442d18 	.word	0x54442d18
 80017e4:	401921fb 	.word	0x401921fb
 80017e8:	54442d18 	.word	0x54442d18
 80017ec:	400921fb 	.word	0x400921fb
 80017f0:	20000538 	.word	0x20000538
 80017f4:	080040c8 	.word	0x080040c8
 80017f8:	200004e8 	.word	0x200004e8
 80017fc:	080040d8 	.word	0x080040d8
 8001800:	20000528 	.word	0x20000528
 8001804:	20000520 	.word	0x20000520
 8001808:	20000510 	.word	0x20000510
 800180c:	20000000 	.word	0x20000000
 8001810:	20000508 	.word	0x20000508
 8001814:	bff00000 	.word	0xbff00000
 8001818:	200004e0 	.word	0x200004e0
 800181c:	40020400 	.word	0x40020400
 8001820:	20000088 	.word	0x20000088
 8001824:	20000500 	.word	0x20000500
 8001828:	20000004 	.word	0x20000004
 800182c:	2000005c 	.word	0x2000005c
 8001830:	200000cc 	.word	0x200000cc

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0a4      	sub	sp, #144	; 0x90
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fc26 	bl	8004094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	223c      	movs	r2, #60	; 0x3c
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f002 fc17 	bl	8004094 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <SystemClock_Config+0x100>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <SystemClock_Config+0x100>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <SystemClock_Config+0x100>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b2c      	ldr	r3, [pc, #176]	; (8001938 <SystemClock_Config+0x104>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <SystemClock_Config+0x104>)
 800188c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <SystemClock_Config+0x104>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189e:	2301      	movs	r3, #1
 80018a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018a6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a8:	2302      	movs	r3, #2
 80018aa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018b2:	2308      	movs	r3, #8
 80018b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80018b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018be:	2304      	movs	r3, #4
 80018c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80018c4:	2308      	movs	r3, #8
 80018c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 fafd 	bl	8002ed4 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80018e0:	f000 f972 	bl	8001bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018fe:	2103      	movs	r1, #3
 8001900:	4618      	mov	r0, r3
 8001902:	f000 ff27 	bl	8002754 <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800190c:	f000 f95c 	bl	8001bc8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001910:	2320      	movs	r3, #32
 8001912:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f90b 	bl	8002b38 <HAL_RCCEx_PeriphCLKConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001928:	f000 f94e 	bl	8001bc8 <Error_Handler>
  }
}
 800192c:	bf00      	nop
 800192e:	3790      	adds	r7, #144	; 0x90
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000

0800193c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART3_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART3_UART_Init+0x4c>)
 8001974:	f001 fcf0 	bl	8003358 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 f923 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	2000008c 	.word	0x2000008c
 800198c:	40004800 	.word	0x40004800

08001990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800199a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800199e:	2206      	movs	r2, #6
 80019a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019da:	f000 fd72 	bl	80024c2 <HAL_PCD_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80019e4:	f000 f8f0 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200000d8 	.word	0x200000d8

080019f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a49      	ldr	r2, [pc, #292]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a42      	ldr	r2, [pc, #264]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a3b      	ldr	r2, [pc, #236]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a34      	ldr	r2, [pc, #208]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a2d      	ldr	r2, [pc, #180]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <MX_GPIO_Init+0x160>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ab4:	4827      	ldr	r0, [pc, #156]	; (8001b54 <MX_GPIO_Init+0x164>)
 8001ab6:	f000 fceb 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	4826      	ldr	r0, [pc, #152]	; (8001b58 <MX_GPIO_Init+0x168>)
 8001ac0:	f000 fce6 	bl	8002490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <MX_GPIO_Init+0x16c>)
 8001acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4821      	ldr	r0, [pc, #132]	; (8001b60 <MX_GPIO_Init+0x170>)
 8001ada:	f000 fb2f 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ade:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <MX_GPIO_Init+0x164>)
 8001af8:	f000 fb20 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4811      	ldr	r0, [pc, #68]	; (8001b58 <MX_GPIO_Init+0x168>)
 8001b14:	f000 fb12 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480b      	ldr	r0, [pc, #44]	; (8001b58 <MX_GPIO_Init+0x168>)
 8001b2c:	f000 fb06 	bl	800213c <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn1_Pin Btn2_Pin Btn3_Pin Btn4_Pin */
  GPIO_InitStruct.Pin = Btn1_Pin|Btn2_Pin|Btn3_Pin|Btn4_Pin;
 8001b30:	23f0      	movs	r3, #240	; 0xf0
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <MX_GPIO_Init+0x174>)
 8001b44:	f000 fafa 	bl	800213c <HAL_GPIO_Init>

}
 8001b48:	bf00      	nop
 8001b4a:	3730      	adds	r7, #48	; 0x30
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40021800 	.word	0x40021800
 8001b5c:	10110000 	.word	0x10110000
 8001b60:	40020800 	.word	0x40020800
 8001b64:	40020c00 	.word	0x40020c00

08001b68 <Read_Event>:

/* USER CODE BEGIN 4 */

eSystemEvent Read_Event()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIOD, Btn1_Pin))
 8001b6c:	2110      	movs	r1, #16
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <Read_Event+0x58>)
 8001b70:	f000 fc76 	bl	8002460 <HAL_GPIO_ReadPin>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <Read_Event+0x16>
	{
		return Btn_1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e01d      	b.n	8001bba <Read_Event+0x52>
	}
	if(!HAL_GPIO_ReadPin(GPIOD, Btn2_Pin))
 8001b7e:	2120      	movs	r1, #32
 8001b80:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <Read_Event+0x58>)
 8001b82:	f000 fc6d 	bl	8002460 <HAL_GPIO_ReadPin>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <Read_Event+0x28>
	{
		return Btn_2;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e014      	b.n	8001bba <Read_Event+0x52>
	}
	if(!HAL_GPIO_ReadPin(GPIOD, Btn3_Pin))
 8001b90:	2140      	movs	r1, #64	; 0x40
 8001b92:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <Read_Event+0x58>)
 8001b94:	f000 fc64 	bl	8002460 <HAL_GPIO_ReadPin>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <Read_Event+0x3a>
	{
		return Btn_3;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e00b      	b.n	8001bba <Read_Event+0x52>
	}
	if(!HAL_GPIO_ReadPin(GPIOD, Btn4_Pin))
 8001ba2:	2180      	movs	r1, #128	; 0x80
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <Read_Event+0x58>)
 8001ba6:	f000 fc5b 	bl	8002460 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <Read_Event+0x4c>
	{
		return Btn_4;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e002      	b.n	8001bba <Read_Event+0x52>
	}
	else
		debounce = false;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <Read_Event+0x5c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	2000005c 	.word	0x2000005c

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_MspInit+0x4c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_MspInit+0x4c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_UART_MspInit+0x84>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d12c      	bne.n	8001ca4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_UART_MspInit+0x88>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c94:	2307      	movs	r3, #7
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_MspInit+0x8c>)
 8001ca0:	f000 fa4c 	bl	800213c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004800 	.word	0x40004800
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd8:	d13f      	bne.n	8001d5a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001cf6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d08:	230a      	movs	r3, #10
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4815      	ldr	r0, [pc, #84]	; (8001d68 <HAL_PCD_MspInit+0xb0>)
 8001d14:	f000 fa12 	bl	800213c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480e      	ldr	r0, [pc, #56]	; (8001d68 <HAL_PCD_MspInit+0xb0>)
 8001d2e:	f000 fa05 	bl	800213c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3c:	6353      	str	r3, [r2, #52]	; 0x34
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_PCD_MspInit+0xac>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020000 	.word	0x40020000

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f000 f894 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <SystemInit+0x28>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <SystemInit+0x28>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <SystemInit+0x28>)
 8001dde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001de2:	609a      	str	r2, [r3, #8]
#endif
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x14>
 8001df8:	2100      	movs	r1, #0
 8001dfa:	e003      	b.n	8001e04 <LoopCopyDataInit>

08001dfc <CopyDataInit>:
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <LoopFillZerobss+0x18>)
 8001dfe:	585b      	ldr	r3, [r3, r1]
 8001e00:	5043      	str	r3, [r0, r1]
 8001e02:	3104      	adds	r1, #4

08001e04 <LoopCopyDataInit>:
 8001e04:	480b      	ldr	r0, [pc, #44]	; (8001e34 <LoopFillZerobss+0x1c>)
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LoopFillZerobss+0x20>)
 8001e08:	1842      	adds	r2, r0, r1
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d3f6      	bcc.n	8001dfc <CopyDataInit>
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x24>)
 8001e10:	e002      	b.n	8001e18 <LoopFillZerobss>

08001e12 <FillZerobss>:
 8001e12:	2300      	movs	r3, #0
 8001e14:	f842 3b04 	str.w	r3, [r2], #4

08001e18 <LoopFillZerobss>:
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <LoopFillZerobss+0x28>)
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d3f9      	bcc.n	8001e12 <FillZerobss>
 8001e1e:	f7ff ffd3 	bl	8001dc8 <SystemInit>
 8001e22:	f002 f913 	bl	800404c <__libc_init_array>
 8001e26:	f7ff fb83 	bl	8001530 <main>
 8001e2a:	4770      	bx	lr
 8001e2c:	20040000 	.word	0x20040000
 8001e30:	08004110 	.word	0x08004110
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000040 	.word	0x20000040
 8001e3c:	20000040 	.word	0x20000040
 8001e40:	2000054c 	.word	0x2000054c

08001e44 <ADC_IRQHandler>:
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_Init+0x40>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_Init+0x40>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_Init+0x40>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f92f 	bl	80020d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f000 f808 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff feac 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x54>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x58>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f939 	bl	8002122 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f90f 	bl	80020ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_InitTick+0x5c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000034 	.word	0x20000034
 8001ee4:	2000003c 	.word	0x2000003c
 8001ee8:	20000038 	.word	0x20000038

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	2000003c 	.word	0x2000003c
 8001f10:	20000548 	.word	0x20000548

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000548 	.word	0x20000548

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_Delay+0x40>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000003c 	.word	0x2000003c

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d301      	bcc.n	80020a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00f      	b.n	80020c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a6:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <SysTick_Config+0x40>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ae:	210f      	movs	r1, #15
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f7ff ff8e 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <SysTick_Config+0x40>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <SysTick_Config+0x40>)
 80020c0:	2207      	movs	r2, #7
 80020c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	e000e010 	.word	0xe000e010

080020d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff47 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b086      	sub	sp, #24
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020fc:	f7ff ff5c 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 8002100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	6978      	ldr	r0, [r7, #20]
 8002108:	f7ff ff8e 	bl	8002028 <NVIC_EncodePriority>
 800210c:	4602      	mov	r2, r0
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff5d 	bl	8001fd4 <__NVIC_SetPriority>
}
 800211a:	bf00      	nop
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffb0 	bl	8002090 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e165      	b.n	8002424 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8154 	bne.w	800241e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d00b      	beq.n	8002196 <HAL_GPIO_Init+0x5a>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d007      	beq.n	8002196 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800218a:	2b11      	cmp	r3, #17
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b12      	cmp	r3, #18
 8002194:	d130      	bne.n	80021f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 0201 	and.w	r2, r3, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0xfc>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b12      	cmp	r3, #18
 8002236:	d123      	bne.n	8002280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	08da      	lsrs	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3208      	adds	r2, #8
 8002240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	220f      	movs	r2, #15
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	69b9      	ldr	r1, [r7, #24]
 800227c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80ae 	beq.w	800241e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <HAL_GPIO_Init+0x2fc>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a5b      	ldr	r2, [pc, #364]	; (8002438 <HAL_GPIO_Init+0x2fc>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_GPIO_Init+0x2fc>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022de:	4a57      	ldr	r2, [pc, #348]	; (800243c <HAL_GPIO_Init+0x300>)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3302      	adds	r3, #2
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4e      	ldr	r2, [pc, #312]	; (8002440 <HAL_GPIO_Init+0x304>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x21a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4d      	ldr	r2, [pc, #308]	; (8002444 <HAL_GPIO_Init+0x308>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x216>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4c      	ldr	r2, [pc, #304]	; (8002448 <HAL_GPIO_Init+0x30c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x212>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <HAL_GPIO_Init+0x310>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x20e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4a      	ldr	r2, [pc, #296]	; (8002450 <HAL_GPIO_Init+0x314>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x20a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_GPIO_Init+0x318>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x206>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_GPIO_Init+0x31c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x202>
 800233a:	2306      	movs	r3, #6
 800233c:	e00c      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 800233e:	2307      	movs	r3, #7
 8002340:	e00a      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002342:	2305      	movs	r3, #5
 8002344:	e008      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002346:	2304      	movs	r3, #4
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 800234a:	2303      	movs	r3, #3
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x21c>
 8002356:	2300      	movs	r3, #0
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f002 0203 	and.w	r2, r2, #3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4093      	lsls	r3, r2
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002368:	4934      	ldr	r1, [pc, #208]	; (800243c <HAL_GPIO_Init+0x300>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_GPIO_Init+0x320>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_GPIO_Init+0x320>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a0:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_GPIO_Init+0x320>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c4:	4a25      	ldr	r2, [pc, #148]	; (800245c <HAL_GPIO_Init+0x320>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_GPIO_Init+0x320>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ee:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_GPIO_Init+0x320>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_GPIO_Init+0x320>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002418:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_GPIO_Init+0x320>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	f67f ae96 	bls.w	8002158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800242c:	bf00      	nop
 800242e:	3724      	adds	r7, #36	; 0x24
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40023800 	.word	0x40023800
 800243c:	40013800 	.word	0x40013800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	40020800 	.word	0x40020800
 800244c:	40020c00 	.word	0x40020c00
 8002450:	40021000 	.word	0x40021000
 8002454:	40021400 	.word	0x40021400
 8002458:	40021800 	.word	0x40021800
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e001      	b.n	8002482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	807b      	strh	r3, [r7, #2]
 800249c:	4613      	mov	r3, r2
 800249e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024ac:	e003      	b.n	80024b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	041a      	lsls	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c4:	b08f      	sub	sp, #60	; 0x3c
 80024c6:	af0a      	add	r7, sp, #40	; 0x28
 80024c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e116      	b.n	8002702 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fbe2 	bl	8001cb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2203      	movs	r2, #3
 80024f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d102      	bne.n	800250e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fb4b 	bl	8003bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	687e      	ldr	r6, [r7, #4]
 8002520:	466d      	mov	r5, sp
 8002522:	f106 0410 	add.w	r4, r6, #16
 8002526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800252c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800252e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002532:	e885 0003 	stmia.w	r5, {r0, r1}
 8002536:	1d33      	adds	r3, r6, #4
 8002538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800253a:	6838      	ldr	r0, [r7, #0]
 800253c:	f001 fad6 	bl	8003aec <USB_CoreInit>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2202      	movs	r2, #2
 800254a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0d7      	b.n	8002702 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f001 fb39 	bl	8003bd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	e04a      	b.n	80025fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	333d      	adds	r3, #61	; 0x3d
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	333c      	adds	r3, #60	; 0x3c
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	b298      	uxth	r0, r3
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3342      	adds	r3, #66	; 0x42
 80025a0:	4602      	mov	r2, r0
 80025a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	333f      	adds	r3, #63	; 0x3f
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3344      	adds	r3, #68	; 0x44
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3348      	adds	r3, #72	; 0x48
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3350      	adds	r3, #80	; 0x50
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	3301      	adds	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d3af      	bcc.n	8002564 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e044      	b.n	8002694 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002662:	7bfa      	ldrb	r2, [r7, #15]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	3301      	adds	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d3b5      	bcc.n	800260a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	687e      	ldr	r6, [r7, #4]
 80026a6:	466d      	mov	r5, sp
 80026a8:	f106 0410 	add.w	r4, r6, #16
 80026ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026bc:	1d33      	adds	r3, r6, #4
 80026be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c0:	6838      	ldr	r0, [r7, #0]
 80026c2:	f001 faaf 	bl	8003c24 <USB_DevInit>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e014      	b.n	8002702 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d102      	bne.n	80026f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f80a 	bl	800270a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fc51 	bl	8003fa2 <USB_DevDisconnect>

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800270a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	f043 0303 	orr.w	r3, r3, #3
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0cc      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b68      	ldr	r3, [pc, #416]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d90c      	bls.n	8002790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a58      	ldr	r2, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a52      	ldr	r2, [pc, #328]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d044      	beq.n	8002874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d003      	beq.n	8002812 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280e:	2b03      	cmp	r3, #3
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e067      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b37      	ldr	r3, [pc, #220]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4934      	ldr	r1, [pc, #208]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002844:	f7ff fb66 	bl	8001f14 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7ff fb62 	bl	8001f14 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	; 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d20c      	bcs.n	800289c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4601      	mov	r1, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	fa21 f303 	lsr.w	r3, r1, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fac6 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00
 8002910:	40023800 	.word	0x40023800
 8002914:	080040e8 	.word	0x080040e8
 8002918:	20000034 	.word	0x20000034
 800291c:	20000038 	.word	0x20000038

08002920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	2300      	movs	r3, #0
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002936:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d007      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x32>
 8002942:	2b08      	cmp	r3, #8
 8002944:	d008      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x38>
 8002946:	2b00      	cmp	r3, #0
 8002948:	f040 80b4 	bne.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800294e:	60bb      	str	r3, [r7, #8]
       break;
 8002950:	e0b3      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002952:	4b5e      	ldr	r3, [pc, #376]	; (8002acc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002954:	60bb      	str	r3, [r7, #8]
      break;
 8002956:	e0b0      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002958:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002960:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002962:	4b58      	ldr	r3, [pc, #352]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d04a      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296e:	4b55      	ldr	r3, [pc, #340]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	099b      	lsrs	r3, r3, #6
 8002974:	f04f 0400 	mov.w	r4, #0
 8002978:	f240 11ff 	movw	r1, #511	; 0x1ff
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	ea03 0501 	and.w	r5, r3, r1
 8002984:	ea04 0602 	and.w	r6, r4, r2
 8002988:	4629      	mov	r1, r5
 800298a:	4632      	mov	r2, r6
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	0154      	lsls	r4, r2, #5
 8002996:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800299a:	014b      	lsls	r3, r1, #5
 800299c:	4619      	mov	r1, r3
 800299e:	4622      	mov	r2, r4
 80029a0:	1b49      	subs	r1, r1, r5
 80029a2:	eb62 0206 	sbc.w	r2, r2, r6
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	f04f 0400 	mov.w	r4, #0
 80029ae:	0194      	lsls	r4, r2, #6
 80029b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029b4:	018b      	lsls	r3, r1, #6
 80029b6:	1a5b      	subs	r3, r3, r1
 80029b8:	eb64 0402 	sbc.w	r4, r4, r2
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	00e2      	lsls	r2, r4, #3
 80029c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029ca:	00d9      	lsls	r1, r3, #3
 80029cc:	460b      	mov	r3, r1
 80029ce:	4614      	mov	r4, r2
 80029d0:	195b      	adds	r3, r3, r5
 80029d2:	eb44 0406 	adc.w	r4, r4, r6
 80029d6:	f04f 0100 	mov.w	r1, #0
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	0262      	lsls	r2, r4, #9
 80029e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029e4:	0259      	lsls	r1, r3, #9
 80029e6:	460b      	mov	r3, r1
 80029e8:	4614      	mov	r4, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	4621      	mov	r1, r4
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f04f 0400 	mov.w	r4, #0
 80029f4:	461a      	mov	r2, r3
 80029f6:	4623      	mov	r3, r4
 80029f8:	f7fd ffdc 	bl	80009b4 <__aeabi_uldivmod>
 80029fc:	4603      	mov	r3, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	e049      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	f04f 0400 	mov.w	r4, #0
 8002a0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	ea03 0501 	and.w	r5, r3, r1
 8002a1a:	ea04 0602 	and.w	r6, r4, r2
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4632      	mov	r2, r6
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	f04f 0400 	mov.w	r4, #0
 8002a2a:	0154      	lsls	r4, r2, #5
 8002a2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a30:	014b      	lsls	r3, r1, #5
 8002a32:	4619      	mov	r1, r3
 8002a34:	4622      	mov	r2, r4
 8002a36:	1b49      	subs	r1, r1, r5
 8002a38:	eb62 0206 	sbc.w	r2, r2, r6
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	0194      	lsls	r4, r2, #6
 8002a46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a4a:	018b      	lsls	r3, r1, #6
 8002a4c:	1a5b      	subs	r3, r3, r1
 8002a4e:	eb64 0402 	sbc.w	r4, r4, r2
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	00e2      	lsls	r2, r4, #3
 8002a5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a60:	00d9      	lsls	r1, r3, #3
 8002a62:	460b      	mov	r3, r1
 8002a64:	4614      	mov	r4, r2
 8002a66:	195b      	adds	r3, r3, r5
 8002a68:	eb44 0406 	adc.w	r4, r4, r6
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	02a2      	lsls	r2, r4, #10
 8002a76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a7a:	0299      	lsls	r1, r3, #10
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4614      	mov	r4, r2
 8002a80:	4618      	mov	r0, r3
 8002a82:	4621      	mov	r1, r4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	f7fd ff91 	bl	80009b4 <__aeabi_uldivmod>
 8002a92:	4603      	mov	r3, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ab6:	60bb      	str	r3, [r7, #8]
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	68bb      	ldr	r3, [r7, #8]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	007a1200 	.word	0x007a1200

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000034 	.word	0x20000034

08002ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aec:	f7ff fff0 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002af0:	4601      	mov	r1, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0a9b      	lsrs	r3, r3, #10
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afe:	5cd3      	ldrb	r3, [r2, r3]
 8002b00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080040f8 	.word	0x080040f8

08002b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b14:	f7ff ffdc 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0b5b      	lsrs	r3, r3, #13
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	080040f8 	.word	0x080040f8

08002b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002b58:	4b87      	ldr	r3, [pc, #540]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	4984      	ldr	r1, [pc, #528]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d010      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002b86:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	4978      	ldr	r1, [pc, #480]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8083 	beq.w	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a6e      	ldr	r2, [pc, #440]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b6c      	ldr	r3, [pc, #432]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002bd2:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a69      	ldr	r2, [pc, #420]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bde:	f7ff f999 	bl	8001f14 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7ff f995 	bl	8001f14 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e162      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002bf8:	4b60      	ldr	r3, [pc, #384]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c04:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02f      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d028      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c22:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c2c:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c32:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002c38:	4a4f      	ldr	r2, [pc, #316]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c3e:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d114      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7ff f963 	bl	8001f14 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7ff f95f 	bl	8001f14 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e12a      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ee      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c80:	d10d      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c82:	4b3d      	ldr	r3, [pc, #244]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	4938      	ldr	r1, [pc, #224]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
 8002c9c:	e005      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a35      	ldr	r2, [pc, #212]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb6:	4930      	ldr	r1, [pc, #192]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	4922      	ldr	r1, [pc, #136]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d011      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	491a      	ldr	r1, [pc, #104]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d004      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	f040 8091 	bne.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d56:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7ff f8da 	bl	8001f14 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d62:	e013      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d64:	f7ff f8d6 	bl	8001f14 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d90c      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0a3      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470e40 	.word	0x42470e40
 8002d84:	424711e0 	.word	0x424711e0
 8002d88:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d8c:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e5      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002d98:	4a4c      	ldr	r2, [pc, #304]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ddc:	d00e      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d019      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d115      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d110      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	492c      	ldr	r1, [pc, #176]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	019b      	lsls	r3, r3, #6
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	071b      	lsls	r3, r3, #28
 8002e44:	4920      	ldr	r1, [pc, #128]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e52:	f7ff f85f 	bl	8001f14 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e5a:	f7ff f85b 	bl	8001f14 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e028      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f0      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	490d      	ldr	r1, [pc, #52]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	424710d8 	.word	0x424710d8
 8002ed0:	42470068 	.word	0x42470068

08002ed4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d075      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eec:	4ba2      	ldr	r3, [pc, #648]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef8:	4b9f      	ldr	r3, [pc, #636]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d112      	bne.n	8002f2a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f04:	4b9c      	ldr	r3, [pc, #624]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f10:	d10b      	bne.n	8002f2a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f12:	4b99      	ldr	r3, [pc, #612]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d05b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x102>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d157      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e20b      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x6e>
 8002f34:	4b90      	ldr	r3, [pc, #576]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a8f      	ldr	r2, [pc, #572]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e01d      	b.n	8002f7e <HAL_RCC_OscConfig+0xaa>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4a:	d10c      	bne.n	8002f66 <HAL_RCC_OscConfig+0x92>
 8002f4c:	4b8a      	ldr	r3, [pc, #552]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a89      	ldr	r2, [pc, #548]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b87      	ldr	r3, [pc, #540]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a86      	ldr	r2, [pc, #536]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e00b      	b.n	8002f7e <HAL_RCC_OscConfig+0xaa>
 8002f66:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a83      	ldr	r2, [pc, #524]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d013      	beq.n	8002fae <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fe ffc5 	bl	8001f14 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8e:	f7fe ffc1 	bl	8001f14 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1d0      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0xba>
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fae:	f7fe ffb1 	bl	8001f14 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb6:	f7fe ffad 	bl	8001f14 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b64      	cmp	r3, #100	; 0x64
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e1bc      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0xe2>
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d063      	beq.n	80030ac <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d11c      	bne.n	8003036 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003008:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x14c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e190      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4952      	ldr	r1, [pc, #328]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003034:	e03a      	b.n	80030ac <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303e:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x2a8>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe ff66 	bl	8001f14 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304c:	f7fe ff62 	bl	8001f14 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e171      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	493f      	ldr	r1, [pc, #252]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
 800307e:	e015      	b.n	80030ac <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003080:	4b3e      	ldr	r3, [pc, #248]	; (800317c <HAL_RCC_OscConfig+0x2a8>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe ff45 	bl	8001f14 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe ff41 	bl	8001f14 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e150      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d030      	beq.n	800311a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d016      	beq.n	80030ee <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe ff25 	bl	8001f14 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe ff21 	bl	8001f14 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e130      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x1fa>
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe ff0e 	bl	8001f14 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fe ff0a 	bl	8001f14 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e119      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310e:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 809f 	beq.w	8003266 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10f      	bne.n	8003158 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003146:	6413      	str	r3, [r2, #64]	; 0x40
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x2a4>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_OscConfig+0x2b0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d120      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <HAL_RCC_OscConfig+0x2b0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a06      	ldr	r2, [pc, #24]	; (8003184 <HAL_RCC_OscConfig+0x2b0>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003170:	f7fe fed0 	bl	8001f14 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003176:	e010      	b.n	800319a <HAL_RCC_OscConfig+0x2c6>
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
 8003184:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe fec4 	bl	8001f14 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0d3      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b6c      	ldr	r3, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x478>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x2e8>
 80031ae:	4b68      	ldr	r3, [pc, #416]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a67      	ldr	r2, [pc, #412]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x322>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x30a>
 80031c4:	4b62      	ldr	r3, [pc, #392]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a61      	ldr	r2, [pc, #388]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	4b5f      	ldr	r3, [pc, #380]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a5e      	ldr	r2, [pc, #376]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x322>
 80031de:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a5b      	ldr	r2, [pc, #364]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe fe89 	bl	8001f14 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe fe85 	bl	8001f14 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e092      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b4c      	ldr	r3, [pc, #304]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x332>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fe fe73 	bl	8001f14 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fe6f 	bl	8001f14 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e07c      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b41      	ldr	r3, [pc, #260]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d068      	beq.n	8003340 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d060      	beq.n	800333c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d145      	bne.n	800330e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b34      	ldr	r3, [pc, #208]	; (8003354 <HAL_RCC_OscConfig+0x480>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003288:	f7fe fe44 	bl	8001f14 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe fe40 	bl	8001f14 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	071b      	lsls	r3, r3, #28
 80032da:	491d      	ldr	r1, [pc, #116]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <HAL_RCC_OscConfig+0x480>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fe fe15 	bl	8001f14 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ee:	f7fe fe11 	bl	8001f14 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e020      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x41a>
 800330c:	e018      	b.n	8003340 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_RCC_OscConfig+0x480>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fdfe 	bl	8001f14 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fdfa 	bl	8001f14 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e009      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_RCC_OscConfig+0x47c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x448>
 800333a:	e001      	b.n	8003340 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40007000 	.word	0x40007000
 8003350:	40023800 	.word	0x40023800
 8003354:	42470060 	.word	0x42470060

08003358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e03f      	b.n	80033ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe fc52 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2224      	movs	r2, #36	; 0x24
 8003388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800339a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f829 	bl	80033f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003436:	f023 030c 	bic.w	r3, r3, #12
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	430b      	orrs	r3, r1
 8003442:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003462:	f040 818b 	bne.w	800377c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4ac1      	ldr	r2, [pc, #772]	; (8003770 <UART_SetConfig+0x37c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d005      	beq.n	800347c <UART_SetConfig+0x88>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4abf      	ldr	r2, [pc, #764]	; (8003774 <UART_SetConfig+0x380>)
 8003476:	4293      	cmp	r3, r2
 8003478:	f040 80bd 	bne.w	80035f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800347c:	f7ff fb48 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003480:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	461d      	mov	r5, r3
 8003486:	f04f 0600 	mov.w	r6, #0
 800348a:	46a8      	mov	r8, r5
 800348c:	46b1      	mov	r9, r6
 800348e:	eb18 0308 	adds.w	r3, r8, r8
 8003492:	eb49 0409 	adc.w	r4, r9, r9
 8003496:	4698      	mov	r8, r3
 8003498:	46a1      	mov	r9, r4
 800349a:	eb18 0805 	adds.w	r8, r8, r5
 800349e:	eb49 0906 	adc.w	r9, r9, r6
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034b6:	4688      	mov	r8, r1
 80034b8:	4691      	mov	r9, r2
 80034ba:	eb18 0005 	adds.w	r0, r8, r5
 80034be:	eb49 0106 	adc.w	r1, r9, r6
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	461d      	mov	r5, r3
 80034c8:	f04f 0600 	mov.w	r6, #0
 80034cc:	196b      	adds	r3, r5, r5
 80034ce:	eb46 0406 	adc.w	r4, r6, r6
 80034d2:	461a      	mov	r2, r3
 80034d4:	4623      	mov	r3, r4
 80034d6:	f7fd fa6d 	bl	80009b4 <__aeabi_uldivmod>
 80034da:	4603      	mov	r3, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	461a      	mov	r2, r3
 80034e0:	4ba5      	ldr	r3, [pc, #660]	; (8003778 <UART_SetConfig+0x384>)
 80034e2:	fba3 2302 	umull	r2, r3, r3, r2
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	461d      	mov	r5, r3
 80034f0:	f04f 0600 	mov.w	r6, #0
 80034f4:	46a9      	mov	r9, r5
 80034f6:	46b2      	mov	sl, r6
 80034f8:	eb19 0309 	adds.w	r3, r9, r9
 80034fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003500:	4699      	mov	r9, r3
 8003502:	46a2      	mov	sl, r4
 8003504:	eb19 0905 	adds.w	r9, r9, r5
 8003508:	eb4a 0a06 	adc.w	sl, sl, r6
 800350c:	f04f 0100 	mov.w	r1, #0
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800351c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003520:	4689      	mov	r9, r1
 8003522:	4692      	mov	sl, r2
 8003524:	eb19 0005 	adds.w	r0, r9, r5
 8003528:	eb4a 0106 	adc.w	r1, sl, r6
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	461d      	mov	r5, r3
 8003532:	f04f 0600 	mov.w	r6, #0
 8003536:	196b      	adds	r3, r5, r5
 8003538:	eb46 0406 	adc.w	r4, r6, r6
 800353c:	461a      	mov	r2, r3
 800353e:	4623      	mov	r3, r4
 8003540:	f7fd fa38 	bl	80009b4 <__aeabi_uldivmod>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	461a      	mov	r2, r3
 800354a:	4b8b      	ldr	r3, [pc, #556]	; (8003778 <UART_SetConfig+0x384>)
 800354c:	fba3 1302 	umull	r1, r3, r3, r2
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	2164      	movs	r1, #100	; 0x64
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	3332      	adds	r3, #50	; 0x32
 800355e:	4a86      	ldr	r2, [pc, #536]	; (8003778 <UART_SetConfig+0x384>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800356c:	4498      	add	r8, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	461d      	mov	r5, r3
 8003572:	f04f 0600 	mov.w	r6, #0
 8003576:	46a9      	mov	r9, r5
 8003578:	46b2      	mov	sl, r6
 800357a:	eb19 0309 	adds.w	r3, r9, r9
 800357e:	eb4a 040a 	adc.w	r4, sl, sl
 8003582:	4699      	mov	r9, r3
 8003584:	46a2      	mov	sl, r4
 8003586:	eb19 0905 	adds.w	r9, r9, r5
 800358a:	eb4a 0a06 	adc.w	sl, sl, r6
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800359a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800359e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035a2:	4689      	mov	r9, r1
 80035a4:	4692      	mov	sl, r2
 80035a6:	eb19 0005 	adds.w	r0, r9, r5
 80035aa:	eb4a 0106 	adc.w	r1, sl, r6
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	461d      	mov	r5, r3
 80035b4:	f04f 0600 	mov.w	r6, #0
 80035b8:	196b      	adds	r3, r5, r5
 80035ba:	eb46 0406 	adc.w	r4, r6, r6
 80035be:	461a      	mov	r2, r3
 80035c0:	4623      	mov	r3, r4
 80035c2:	f7fd f9f7 	bl	80009b4 <__aeabi_uldivmod>
 80035c6:	4603      	mov	r3, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <UART_SetConfig+0x384>)
 80035ce:	fba3 1302 	umull	r1, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2164      	movs	r1, #100	; 0x64
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	3332      	adds	r3, #50	; 0x32
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <UART_SetConfig+0x384>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 0207 	and.w	r2, r3, #7
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4442      	add	r2, r8
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	e26f      	b.n	8003ad6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035f6:	f7ff fa77 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 80035fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	461d      	mov	r5, r3
 8003600:	f04f 0600 	mov.w	r6, #0
 8003604:	46a8      	mov	r8, r5
 8003606:	46b1      	mov	r9, r6
 8003608:	eb18 0308 	adds.w	r3, r8, r8
 800360c:	eb49 0409 	adc.w	r4, r9, r9
 8003610:	4698      	mov	r8, r3
 8003612:	46a1      	mov	r9, r4
 8003614:	eb18 0805 	adds.w	r8, r8, r5
 8003618:	eb49 0906 	adc.w	r9, r9, r6
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003628:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800362c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003630:	4688      	mov	r8, r1
 8003632:	4691      	mov	r9, r2
 8003634:	eb18 0005 	adds.w	r0, r8, r5
 8003638:	eb49 0106 	adc.w	r1, r9, r6
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	461d      	mov	r5, r3
 8003642:	f04f 0600 	mov.w	r6, #0
 8003646:	196b      	adds	r3, r5, r5
 8003648:	eb46 0406 	adc.w	r4, r6, r6
 800364c:	461a      	mov	r2, r3
 800364e:	4623      	mov	r3, r4
 8003650:	f7fd f9b0 	bl	80009b4 <__aeabi_uldivmod>
 8003654:	4603      	mov	r3, r0
 8003656:	460c      	mov	r4, r1
 8003658:	461a      	mov	r2, r3
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <UART_SetConfig+0x384>)
 800365c:	fba3 2302 	umull	r2, r3, r3, r2
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	461d      	mov	r5, r3
 800366a:	f04f 0600 	mov.w	r6, #0
 800366e:	46a9      	mov	r9, r5
 8003670:	46b2      	mov	sl, r6
 8003672:	eb19 0309 	adds.w	r3, r9, r9
 8003676:	eb4a 040a 	adc.w	r4, sl, sl
 800367a:	4699      	mov	r9, r3
 800367c:	46a2      	mov	sl, r4
 800367e:	eb19 0905 	adds.w	r9, r9, r5
 8003682:	eb4a 0a06 	adc.w	sl, sl, r6
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003692:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003696:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800369a:	4689      	mov	r9, r1
 800369c:	4692      	mov	sl, r2
 800369e:	eb19 0005 	adds.w	r0, r9, r5
 80036a2:	eb4a 0106 	adc.w	r1, sl, r6
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	461d      	mov	r5, r3
 80036ac:	f04f 0600 	mov.w	r6, #0
 80036b0:	196b      	adds	r3, r5, r5
 80036b2:	eb46 0406 	adc.w	r4, r6, r6
 80036b6:	461a      	mov	r2, r3
 80036b8:	4623      	mov	r3, r4
 80036ba:	f7fd f97b 	bl	80009b4 <__aeabi_uldivmod>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <UART_SetConfig+0x384>)
 80036c6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2164      	movs	r1, #100	; 0x64
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a27      	ldr	r2, [pc, #156]	; (8003778 <UART_SetConfig+0x384>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e6:	4498      	add	r8, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	461d      	mov	r5, r3
 80036ec:	f04f 0600 	mov.w	r6, #0
 80036f0:	46a9      	mov	r9, r5
 80036f2:	46b2      	mov	sl, r6
 80036f4:	eb19 0309 	adds.w	r3, r9, r9
 80036f8:	eb4a 040a 	adc.w	r4, sl, sl
 80036fc:	4699      	mov	r9, r3
 80036fe:	46a2      	mov	sl, r4
 8003700:	eb19 0905 	adds.w	r9, r9, r5
 8003704:	eb4a 0a06 	adc.w	sl, sl, r6
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003714:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003718:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800371c:	4689      	mov	r9, r1
 800371e:	4692      	mov	sl, r2
 8003720:	eb19 0005 	adds.w	r0, r9, r5
 8003724:	eb4a 0106 	adc.w	r1, sl, r6
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	461d      	mov	r5, r3
 800372e:	f04f 0600 	mov.w	r6, #0
 8003732:	196b      	adds	r3, r5, r5
 8003734:	eb46 0406 	adc.w	r4, r6, r6
 8003738:	461a      	mov	r2, r3
 800373a:	4623      	mov	r3, r4
 800373c:	f7fd f93a 	bl	80009b4 <__aeabi_uldivmod>
 8003740:	4603      	mov	r3, r0
 8003742:	460c      	mov	r4, r1
 8003744:	461a      	mov	r2, r3
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <UART_SetConfig+0x384>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	; 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <UART_SetConfig+0x384>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 0207 	and.w	r2, r3, #7
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4442      	add	r2, r8
 800376c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800376e:	e1b2      	b.n	8003ad6 <UART_SetConfig+0x6e2>
 8003770:	40011000 	.word	0x40011000
 8003774:	40011400 	.word	0x40011400
 8003778:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4ad7      	ldr	r2, [pc, #860]	; (8003ae0 <UART_SetConfig+0x6ec>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d005      	beq.n	8003792 <UART_SetConfig+0x39e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4ad6      	ldr	r2, [pc, #856]	; (8003ae4 <UART_SetConfig+0x6f0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	f040 80d1 	bne.w	8003934 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003792:	f7ff f9bd 	bl	8002b10 <HAL_RCC_GetPCLK2Freq>
 8003796:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	469a      	mov	sl, r3
 800379c:	f04f 0b00 	mov.w	fp, #0
 80037a0:	46d0      	mov	r8, sl
 80037a2:	46d9      	mov	r9, fp
 80037a4:	eb18 0308 	adds.w	r3, r8, r8
 80037a8:	eb49 0409 	adc.w	r4, r9, r9
 80037ac:	4698      	mov	r8, r3
 80037ae:	46a1      	mov	r9, r4
 80037b0:	eb18 080a 	adds.w	r8, r8, sl
 80037b4:	eb49 090b 	adc.w	r9, r9, fp
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037cc:	4688      	mov	r8, r1
 80037ce:	4691      	mov	r9, r2
 80037d0:	eb1a 0508 	adds.w	r5, sl, r8
 80037d4:	eb4b 0609 	adc.w	r6, fp, r9
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	4619      	mov	r1, r3
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	0094      	lsls	r4, r2, #2
 80037ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037f0:	008b      	lsls	r3, r1, #2
 80037f2:	461a      	mov	r2, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	4631      	mov	r1, r6
 80037fa:	f7fd f8db 	bl	80009b4 <__aeabi_uldivmod>
 80037fe:	4603      	mov	r3, r0
 8003800:	460c      	mov	r4, r1
 8003802:	461a      	mov	r2, r3
 8003804:	4bb8      	ldr	r3, [pc, #736]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003806:	fba3 2302 	umull	r2, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	469b      	mov	fp, r3
 8003814:	f04f 0c00 	mov.w	ip, #0
 8003818:	46d9      	mov	r9, fp
 800381a:	46e2      	mov	sl, ip
 800381c:	eb19 0309 	adds.w	r3, r9, r9
 8003820:	eb4a 040a 	adc.w	r4, sl, sl
 8003824:	4699      	mov	r9, r3
 8003826:	46a2      	mov	sl, r4
 8003828:	eb19 090b 	adds.w	r9, r9, fp
 800382c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800383c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003844:	4689      	mov	r9, r1
 8003846:	4692      	mov	sl, r2
 8003848:	eb1b 0509 	adds.w	r5, fp, r9
 800384c:	eb4c 060a 	adc.w	r6, ip, sl
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0094      	lsls	r4, r2, #2
 8003864:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	4628      	mov	r0, r5
 8003870:	4631      	mov	r1, r6
 8003872:	f7fd f89f 	bl	80009b4 <__aeabi_uldivmod>
 8003876:	4603      	mov	r3, r0
 8003878:	460c      	mov	r4, r1
 800387a:	461a      	mov	r2, r3
 800387c:	4b9a      	ldr	r3, [pc, #616]	; (8003ae8 <UART_SetConfig+0x6f4>)
 800387e:	fba3 1302 	umull	r1, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2164      	movs	r1, #100	; 0x64
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	3332      	adds	r3, #50	; 0x32
 8003890:	4a95      	ldr	r2, [pc, #596]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389c:	4498      	add	r8, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	469b      	mov	fp, r3
 80038a2:	f04f 0c00 	mov.w	ip, #0
 80038a6:	46d9      	mov	r9, fp
 80038a8:	46e2      	mov	sl, ip
 80038aa:	eb19 0309 	adds.w	r3, r9, r9
 80038ae:	eb4a 040a 	adc.w	r4, sl, sl
 80038b2:	4699      	mov	r9, r3
 80038b4:	46a2      	mov	sl, r4
 80038b6:	eb19 090b 	adds.w	r9, r9, fp
 80038ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038d2:	4689      	mov	r9, r1
 80038d4:	4692      	mov	sl, r2
 80038d6:	eb1b 0509 	adds.w	r5, fp, r9
 80038da:	eb4c 060a 	adc.w	r6, ip, sl
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4619      	mov	r1, r3
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	0094      	lsls	r4, r2, #2
 80038f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038f6:	008b      	lsls	r3, r1, #2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4623      	mov	r3, r4
 80038fc:	4628      	mov	r0, r5
 80038fe:	4631      	mov	r1, r6
 8003900:	f7fd f858 	bl	80009b4 <__aeabi_uldivmod>
 8003904:	4603      	mov	r3, r0
 8003906:	460c      	mov	r4, r1
 8003908:	461a      	mov	r2, r3
 800390a:	4b77      	ldr	r3, [pc, #476]	; (8003ae8 <UART_SetConfig+0x6f4>)
 800390c:	fba3 1302 	umull	r1, r3, r3, r2
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	2164      	movs	r1, #100	; 0x64
 8003914:	fb01 f303 	mul.w	r3, r1, r3
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	3332      	adds	r3, #50	; 0x32
 800391e:	4a72      	ldr	r2, [pc, #456]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	f003 020f 	and.w	r2, r3, #15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4442      	add	r2, r8
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	e0d0      	b.n	8003ad6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7ff f8d8 	bl	8002ae8 <HAL_RCC_GetPCLK1Freq>
 8003938:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	469a      	mov	sl, r3
 800393e:	f04f 0b00 	mov.w	fp, #0
 8003942:	46d0      	mov	r8, sl
 8003944:	46d9      	mov	r9, fp
 8003946:	eb18 0308 	adds.w	r3, r8, r8
 800394a:	eb49 0409 	adc.w	r4, r9, r9
 800394e:	4698      	mov	r8, r3
 8003950:	46a1      	mov	r9, r4
 8003952:	eb18 080a 	adds.w	r8, r8, sl
 8003956:	eb49 090b 	adc.w	r9, r9, fp
 800395a:	f04f 0100 	mov.w	r1, #0
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003966:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800396a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800396e:	4688      	mov	r8, r1
 8003970:	4691      	mov	r9, r2
 8003972:	eb1a 0508 	adds.w	r5, sl, r8
 8003976:	eb4b 0609 	adc.w	r6, fp, r9
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4619      	mov	r1, r3
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	0094      	lsls	r4, r2, #2
 800398e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003992:	008b      	lsls	r3, r1, #2
 8003994:	461a      	mov	r2, r3
 8003996:	4623      	mov	r3, r4
 8003998:	4628      	mov	r0, r5
 800399a:	4631      	mov	r1, r6
 800399c:	f7fd f80a 	bl	80009b4 <__aeabi_uldivmod>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b50      	ldr	r3, [pc, #320]	; (8003ae8 <UART_SetConfig+0x6f4>)
 80039a8:	fba3 2302 	umull	r2, r3, r3, r2
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	469b      	mov	fp, r3
 80039b6:	f04f 0c00 	mov.w	ip, #0
 80039ba:	46d9      	mov	r9, fp
 80039bc:	46e2      	mov	sl, ip
 80039be:	eb19 0309 	adds.w	r3, r9, r9
 80039c2:	eb4a 040a 	adc.w	r4, sl, sl
 80039c6:	4699      	mov	r9, r3
 80039c8:	46a2      	mov	sl, r4
 80039ca:	eb19 090b 	adds.w	r9, r9, fp
 80039ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039e6:	4689      	mov	r9, r1
 80039e8:	4692      	mov	sl, r2
 80039ea:	eb1b 0509 	adds.w	r5, fp, r9
 80039ee:	eb4c 060a 	adc.w	r6, ip, sl
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4619      	mov	r1, r3
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	0094      	lsls	r4, r2, #2
 8003a06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a0a:	008b      	lsls	r3, r1, #2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	4631      	mov	r1, r6
 8003a14:	f7fc ffce 	bl	80009b4 <__aeabi_uldivmod>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003a20:	fba3 1302 	umull	r1, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2164      	movs	r1, #100	; 0x64
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	3332      	adds	r3, #50	; 0x32
 8003a32:	4a2d      	ldr	r2, [pc, #180]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3e:	4498      	add	r8, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	469b      	mov	fp, r3
 8003a44:	f04f 0c00 	mov.w	ip, #0
 8003a48:	46d9      	mov	r9, fp
 8003a4a:	46e2      	mov	sl, ip
 8003a4c:	eb19 0309 	adds.w	r3, r9, r9
 8003a50:	eb4a 040a 	adc.w	r4, sl, sl
 8003a54:	4699      	mov	r9, r3
 8003a56:	46a2      	mov	sl, r4
 8003a58:	eb19 090b 	adds.w	r9, r9, fp
 8003a5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a60:	f04f 0100 	mov.w	r1, #0
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a74:	4689      	mov	r9, r1
 8003a76:	4692      	mov	sl, r2
 8003a78:	eb1b 0509 	adds.w	r5, fp, r9
 8003a7c:	eb4c 060a 	adc.w	r6, ip, sl
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4619      	mov	r1, r3
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	f04f 0400 	mov.w	r4, #0
 8003a92:	0094      	lsls	r4, r2, #2
 8003a94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a98:	008b      	lsls	r3, r1, #2
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	f7fc ff87 	bl	80009b4 <__aeabi_uldivmod>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003aae:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2164      	movs	r1, #100	; 0x64
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	3332      	adds	r3, #50	; 0x32
 8003ac0:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <UART_SetConfig+0x6f4>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4442      	add	r2, r8
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	e7ff      	b.n	8003ad6 <UART_SetConfig+0x6e2>
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aec:	b084      	sub	sp, #16
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	f107 001c 	add.w	r0, r7, #28
 8003afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d122      	bne.n	8003b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d105      	bne.n	8003b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa50 	bl	8003fe4 <USB_CoreReset>
 8003b44:	4603      	mov	r3, r0
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e01a      	b.n	8003b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa44 	bl	8003fe4 <USB_CoreReset>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
 8003b72:	e005      	b.n	8003b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d10b      	bne.n	8003b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f043 0206 	orr.w	r2, r3, #6
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003baa:	b004      	add	sp, #16
 8003bac:	4770      	bx	lr

08003bae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d106      	bne.n	8003bfc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	e00b      	b.n	8003c14 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	e001      	b.n	8003c14 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e003      	b.n	8003c1c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c14:	2032      	movs	r0, #50	; 0x32
 8003c16:	f7fe f989 	bl	8001f2c <HAL_Delay>

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c24:	b084      	sub	sp, #16
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e009      	b.n	8003c58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	3340      	adds	r3, #64	; 0x40
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3301      	adds	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b0e      	cmp	r3, #14
 8003c5c:	d9f2      	bls.n	8003c44 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11c      	bne.n	8003c9e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e005      	b.n	8003caa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	680b      	ldr	r3, [r1, #0]
 8003cc8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d10c      	bne.n	8003cea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f949 	bl	8003f70 <USB_SetDevSpeed>
 8003cde:	e008      	b.n	8003cf2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f944 	bl	8003f70 <USB_SetDevSpeed>
 8003ce8:	e003      	b.n	8003cf2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cea:	2103      	movs	r1, #3
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f93f 	bl	8003f70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cf2:	2110      	movs	r1, #16
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f8f3 	bl	8003ee0 <USB_FlushTxFifo>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f911 	bl	8003f2c <USB_FlushRxFifo>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d26:	461a      	mov	r2, r3
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	461a      	mov	r2, r3
 8003d34:	2300      	movs	r3, #0
 8003d36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e043      	b.n	8003dc6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d54:	d118      	bne.n	8003d88 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	e013      	b.n	8003d9a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e008      	b.n	8003d9a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	461a      	mov	r2, r3
 8003d96:	2300      	movs	r3, #0
 8003d98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da6:	461a      	mov	r2, r3
 8003da8:	2300      	movs	r3, #0
 8003daa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	461a      	mov	r2, r3
 8003dba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	613b      	str	r3, [r7, #16]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3b7      	bcc.n	8003d3e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	e043      	b.n	8003e5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dea:	d118      	bne.n	8003e1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e013      	b.n	8003e30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	e008      	b.n	8003e30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d3b7      	bcc.n	8003dd4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f043 0210 	orr.w	r2, r3, #16
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <USB_DevInit+0x2b8>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f043 0208 	orr.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d107      	bne.n	8003ecc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ec4:	f043 0304 	orr.w	r3, r3, #4
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ed8:	b004      	add	sp, #16
 8003eda:	4770      	bx	lr
 8003edc:	803c3800 	.word	0x803c3800

08003ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	019b      	lsls	r3, r3, #6
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <USB_FlushTxFifo+0x48>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e006      	b.n	8003f1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d0f0      	beq.n	8003efa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	00030d40 	.word	0x00030d40

08003f2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a09      	ldr	r2, [pc, #36]	; (8003f6c <USB_FlushRxFifo+0x40>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d901      	bls.n	8003f50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e006      	b.n	8003f5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d0f0      	beq.n	8003f3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	00030d40 	.word	0x00030d40

08003f70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003fbc:	f023 0303 	bic.w	r3, r3, #3
 8003fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fd0:	f043 0302 	orr.w	r3, r3, #2
 8003fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <USB_CoreReset+0x64>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e01b      	b.n	800403a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	daf2      	bge.n	8003ff0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3301      	adds	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <USB_CoreReset+0x64>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e006      	b.n	800403a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d0f0      	beq.n	800401a <USB_CoreReset+0x36>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	00030d40 	.word	0x00030d40

0800404c <__libc_init_array>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	4e0d      	ldr	r6, [pc, #52]	; (8004084 <__libc_init_array+0x38>)
 8004050:	4c0d      	ldr	r4, [pc, #52]	; (8004088 <__libc_init_array+0x3c>)
 8004052:	1ba4      	subs	r4, r4, r6
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	2500      	movs	r5, #0
 8004058:	42a5      	cmp	r5, r4
 800405a:	d109      	bne.n	8004070 <__libc_init_array+0x24>
 800405c:	4e0b      	ldr	r6, [pc, #44]	; (800408c <__libc_init_array+0x40>)
 800405e:	4c0c      	ldr	r4, [pc, #48]	; (8004090 <__libc_init_array+0x44>)
 8004060:	f000 f820 	bl	80040a4 <_init>
 8004064:	1ba4      	subs	r4, r4, r6
 8004066:	10a4      	asrs	r4, r4, #2
 8004068:	2500      	movs	r5, #0
 800406a:	42a5      	cmp	r5, r4
 800406c:	d105      	bne.n	800407a <__libc_init_array+0x2e>
 800406e:	bd70      	pop	{r4, r5, r6, pc}
 8004070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004074:	4798      	blx	r3
 8004076:	3501      	adds	r5, #1
 8004078:	e7ee      	b.n	8004058 <__libc_init_array+0xc>
 800407a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800407e:	4798      	blx	r3
 8004080:	3501      	adds	r5, #1
 8004082:	e7f2      	b.n	800406a <__libc_init_array+0x1e>
 8004084:	08004108 	.word	0x08004108
 8004088:	08004108 	.word	0x08004108
 800408c:	08004108 	.word	0x08004108
 8004090:	0800410c 	.word	0x0800410c

08004094 <memset>:
 8004094:	4402      	add	r2, r0
 8004096:	4603      	mov	r3, r0
 8004098:	4293      	cmp	r3, r2
 800409a:	d100      	bne.n	800409e <memset+0xa>
 800409c:	4770      	bx	lr
 800409e:	f803 1b01 	strb.w	r1, [r3], #1
 80040a2:	e7f9      	b.n	8004098 <memset+0x4>

080040a4 <_init>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr

080040b0 <_fini>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	bf00      	nop
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr
